# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate" "--all-features"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = { }; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? [ ]
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig ? if builtins.pathExists ./crate-config.nix
  then pkgs.callPackage ./crate-config.nix { }
  else { }
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "fossbeamer";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "fossbeamer" = rec {
      packageId = "fossbeamer";
      build = internal.buildRustCrateWithFeatures {
        packageId = "fossbeamer";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
    name = "all-workspace-members";
    paths =
      let members = builtins.attrValues workspaceMembers;
      in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.22.0";
        edition = "2018";
        sha256 = "0y66f1sa27i9kvmlh76ynk60rxfrmkba9ja8x527h32wdb206ibf";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "rustc-demangle" "cpp_demangle" "std-object" "fallible-iterator" "smallvec" "memmap2" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "memmap2" = [ "dep:memmap2" ];
          "object" = [ "dep:object" ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
          "std-object" = [ "std" "object" "object/std" "object/compression" "gimli/endian-reader" ];
        };
      };
      "adler" = rec {
        crateName = "adler";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1zim79cvzd5yrkzl3nyfx0avijwgk9fqv3yrscdy1cc79ih02qpj";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "atk" = rec {
        crateName = "atk";
        version = "0.18.0";
        edition = "2021";
        sha256 = "1r0pdczm9jyh6lpn5hc3nmpbmp8ilbab52d6kypyi06x2x5h3bxl";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "atk-sys";
            packageId = "atk-sys";
            rename = "ffi";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "v2_30" = [ "ffi/v2_30" ];
          "v2_32" = [ "v2_30" "ffi/v2_32" ];
          "v2_34" = [ "v2_32" "ffi/v2_34" ];
          "v2_38" = [ "v2_34" "ffi/v2_38" ];
          "v2_46" = [ "v2_38" "ffi/v2_46" ];
          "v2_50" = [ "v2_46" "ffi/v2_50" ];
        };
      };
      "atk-sys" = rec {
        crateName = "atk-sys";
        version = "0.18.0";
        edition = "2021";
        links = "atk-1.0";
        sha256 = "0280k0xw21n3zzri8ynk5mxy7v1mk9d506l962lhngp3j1yhn7i5";
        libName = "atk_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v2_32" = [ "v2_30" ];
          "v2_34" = [ "v2_32" ];
          "v2_38" = [ "v2_34" ];
          "v2_46" = [ "v2_38" ];
          "v2_50" = [ "v2_46" ];
        };
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.3.0";
        edition = "2015";
        sha256 = "1c3njkfzpil03k92q0mij5y1pkhhfr4j3bf0h53bgl2vs85lsjqc";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.73";
        edition = "2021";
        sha256 = "02iffg2pkg5nc36pgml8il7f77s138hhjw9f9l56v5zqlilk5hjw";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
            features = [ "read_core" "elf" "macho" "pe" "xcoff" "unaligned" "archive" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/memoryapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/tlhelp32" "winapi/winbase" "winapi/winnt" "winapi/winnls" "winapi/stringapiset" ];
          "winapi" = [ "dep:winapi" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "base64" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitflags 2.6.0" = rec {
        crateName = "bitflags";
        version = "2.6.0";
        edition = "2021";
        sha256 = "1pkidwzn3hnxlsl8zizh0bncgbjnw7c41cx7bby26ncbzmiznj5h";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "block" = rec {
        crateName = "block";
        version = "0.1.6";
        edition = "2015";
        sha256 = "16k9jgll25pzsq14f244q22cdv0zb4bqacldg3kx6h89d7piz30d";
        authors = [
          "Steven Sheldon"
        ];

      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.6.0";
        edition = "2018";
        sha256 = "1jf2awc1fywpk15m6pxay3wqcg65ararg9xi4b08vnszwiyy2kai";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "cairo-rs" = rec {
        crateName = "cairo-rs";
        version = "0.18.5";
        edition = "2021";
        sha256 = "1qjfkcq3mrh3p01nnn71dy3kn99g21xx3j8xcdvzn8ll2pq6x8lc";
        libName = "cairo";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
            rename = "ffi";
          }
          {
            name = "glib";
            packageId = "glib";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "default" = [ "use_glib" ];
          "freetype" = [ "ffi/freetype" "freetype-rs" ];
          "freetype-rs" = [ "dep:freetype-rs" ];
          "glib" = [ "dep:glib" ];
          "pdf" = [ "ffi/pdf" ];
          "png" = [ "ffi/png" ];
          "ps" = [ "ffi/ps" ];
          "script" = [ "ffi/script" ];
          "svg" = [ "ffi/svg" ];
          "use_glib" = [ "glib" "ffi/use_glib" ];
          "v1_16" = [ "ffi/v1_16" ];
          "v1_18" = [ "v1_16" "ffi/v1_18" ];
          "win32-surface" = [ "ffi/win32-surface" ];
          "xcb" = [ "ffi/xcb" ];
          "xlib" = [ "ffi/xlib" ];
        };
        resolvedDefaultFeatures = [ "default" "glib" "use_glib" ];
      };
      "cairo-sys-rs" = rec {
        crateName = "cairo-sys-rs";
        version = "0.18.2";
        edition = "2021";
        sha256 = "0lfsxl7ylw3phbnwmz3k58j1gnqi6kc2hdc7g3bb7f4hwnl9yp38";
        libName = "cairo_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "glib" = [ "dep:glib" ];
          "use_glib" = [ "glib" ];
          "v1_18" = [ "v1_16" ];
          "win32-surface" = [ "winapi" ];
          "winapi" = [ "dep:winapi" ];
          "x11" = [ "dep:x11" ];
          "xlib" = [ "x11" ];
        };
        resolvedDefaultFeatures = [ "glib" "use_glib" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.101";
        edition = "2018";
        sha256 = "0bap96rkhgbvvglr938a437ks68w9v977z7aqxkmbm0nwmr7jdmc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "dep:libc" "dep:jobserver" "dep:once_cell" ];
        };
      };
      "cesu8" = rec {
        crateName = "cesu8";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0g6q58wa7khxrxcxgnqyi9s1z2cjywwwd3hzr5c55wskhx6s0hvd";
        authors = [
          "Eric Kidd <git@randomhacks.net>"
        ];
        features = { };
      };
      "cfg-expr" = rec {
        crateName = "cfg-expr";
        version = "0.15.8";
        edition = "2021";
        sha256 = "00lgf717pmf5qd2qsxxzs815v6baqg38d6m5i6wlh235p14asryh";
        authors = [
          "Embark <opensource@embark-studios.com>"
          "Jake Shadle <jake.shadle@embark-studios.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "target-lexicon";
            packageId = "target-lexicon";
            optional = true;
          }
        ];
        features = {
          "target-lexicon" = [ "dep:target-lexicon" ];
          "targets" = [ "target-lexicon" ];
        };
        resolvedDefaultFeatures = [ "default" "target-lexicon" "targets" ];
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cocoa" = rec {
        crateName = "cocoa";
        version = "0.25.0";
        edition = "2015";
        sha256 = "0g1pl5hq28arqmvsswf2ib7smj445miwa58qa7wrfvksz54h857n";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "cocoa-foundation";
            packageId = "cocoa-foundation";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];

      };
      "cocoa-foundation" = rec {
        crateName = "cocoa-foundation";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1xwk1khdyqw3dwsl15vr8p86shdcn544fr60ass8biz4nb5k8qlc";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];

      };
      "combine" = rec {
        crateName = "combine";
        version = "4.6.7";
        edition = "2018";
        sha256 = "1z8rh8wp59gf8k23ar010phgs0wgf5i8cx4fg01gwcnzfn5k0nms";
        authors = [
          "Markus Westerlind <marwes91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "bytes_05" = [ "dep:bytes_05" ];
          "default" = [ "std" ];
          "futures-03" = [ "pin-project" "std" "futures-core-03" "futures-io-03" "pin-project-lite" ];
          "futures-core-03" = [ "dep:futures-core-03" ];
          "futures-io-03" = [ "dep:futures-io-03" ];
          "pin-project" = [ "pin-project-lite" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "regex" = [ "dep:regex" ];
          "std" = [ "memchr/std" "bytes" "alloc" ];
          "tokio" = [ "tokio-dep" "tokio-util/io" "futures-core-03" "pin-project-lite" ];
          "tokio-02" = [ "pin-project" "std" "tokio-02-dep" "futures-core-03" "pin-project-lite" "bytes_05" ];
          "tokio-02-dep" = [ "dep:tokio-02-dep" ];
          "tokio-03" = [ "pin-project" "std" "tokio-03-dep" "futures-core-03" "pin-project-lite" ];
          "tokio-03-dep" = [ "dep:tokio-03-dep" ];
          "tokio-dep" = [ "dep:tokio-dep" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bytes" "default" "std" ];
      };
      "convert_case" = rec {
        crateName = "convert_case";
        version = "0.4.0";
        edition = "2018";
        sha256 = "03jaf1wrsyqzcaah9jf8l1iznvdw5mlsca2qghhzr9w27sddaib2";
        authors = [
          "David Purdum <purdum41@gmail.com>"
        ];
        features = {
          "rand" = [ "dep:rand" ];
          "random" = [ "rand" ];
        };
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.9.4";
        edition = "2018";
        sha256 = "13zvbbj07yk3b61b8fhwfzhy35535a583irf23vlcg59j7h9bqci";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.6";
        edition = "2018";
        sha256 = "13w6sdf06r0hn7bx2b45zxsg1mm2phz34jikm6xc5qrbr6djpsh6";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-graphics" = rec {
        crateName = "core-graphics";
        version = "0.23.2";
        edition = "2018";
        sha256 = "10dhv3gk4kmbzl14xxkrhhky4fdp8h6nzff6h0019qgr6nz84xy0";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            usesDefaultFeatures = false;
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
            usesDefaultFeatures = false;
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation/link" "core-graphics-types/link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-graphics-types" = rec {
        crateName = "core-graphics-types";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1bxg8nxc8fk4kxnqyanhf36wq0zrjr552c58qy6733zn2ihhwfa5";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation/link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.12";
        edition = "2018";
        sha256 = "012m7rrak4girqlii3jnqwrr73gv1i980q4wra5yyyhvzwk5xzjk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];

      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.5.13";
        edition = "2021";
        sha256 = "1wkx45r34v7g3wyi3lg2wz536lrrrab4h4hh741shfhr8rlhsj1k";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.20";
        edition = "2021";
        sha256 = "100fksq5mm1n7zj242cclkw6yf7a4a8ix3lvpfkhxvdhbda9kv12";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            features = [ "more_lengths" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "cssparser" = rec {
        crateName = "cssparser";
        version = "0.27.2";
        edition = "2018";
        sha256 = "02nbm690rmkaz1ca0383qq7mc1g066w3s85f17pdihnda79njjvm";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        dependencies = [
          {
            name = "cssparser-macros";
            packageId = "cssparser-macros";
          }
          {
            name = "dtoa-short";
            packageId = "dtoa-short";
          }
          {
            name = "itoa";
            packageId = "itoa 0.4.8";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "phf";
            packageId = "phf 0.8.0";
            features = [ "macros" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        buildDependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" "fold" "full" ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "cssparser-macros" = rec {
        crateName = "cssparser-macros";
        version = "0.6.1";
        edition = "2018";
        sha256 = "0cfkzj60avrnskdmaf7f8zw6pp3di4ylplk455zrzaf19ax8id8k";
        procMacro = true;
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            features = [ "full" "extra-traits" ];
          }
        ];

      };
      "derive_more" = rec {
        crateName = "derive_more";
        version = "0.99.18";
        edition = "2018";
        sha256 = "1kmz7bsjn9jh04nplqdr6bjyi90qkqjlxb8lm5zzvnp46y0qfcsz";
        procMacro = true;
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "convert_case";
            packageId = "convert_case";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
            optional = true;
          }
        ];
        features = {
          "convert_case" = [ "dep:convert_case" ];
          "default" = [ "add_assign" "add" "as_mut" "as_ref" "constructor" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "iterator" "mul_assign" "mul" "not" "sum" "try_into" "is_variant" "unwrap" ];
          "display" = [ "syn/extra-traits" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "generate-parsing-rs" = [ "peg" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "peg" = [ "dep:peg" ];
          "rustc_version" = [ "dep:rustc_version" ];
          "testing-helpers" = [ "rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "unwrap" = [ "convert_case" "rustc_version" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_mut" "as_ref" "constructor" "convert_case" "default" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "iterator" "mul" "mul_assign" "not" "rustc_version" "sum" "try_into" "unwrap" ];
      };
      "digest" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-buffer" "core-api" "default" "std" ];
      };
      "dispatch" = rec {
        crateName = "dispatch";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0fwjr9b7582ic5689zxj8lf7zl94iklhlns3yivrnv8c9fxr635x";
        authors = [
          "Steven Sheldon"
        ];

      };
      "dlopen2" = rec {
        crateName = "dlopen2";
        version = "0.7.0";
        edition = "2021";
        sha256 = "19hmafkfsqbgdw7pvm4s3w4b2l1d9hlydkjgfa2ymfib7l89f4ly";
        authors = [
          "Szymon Wieloch <szymon.wieloch@gmail.com>"
          "Ahmed Masud <ahmed.masud@saf.ai>"
          "OpenByte <development.openbyte@gmail.com>"
        ];
        dependencies = [
          {
            name = "dlopen2_derive";
            packageId = "dlopen2_derive";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winnt" "minwindef" "winerror" "libloaderapi" "errhandlingapi" "dbghelp" "processthreadsapi" "basetsd" ];
          }
        ];
        features = {
          "default" = [ "wrapper" "symbor" "derive" ];
          "derive" = [ "dlopen2_derive" ];
          "dlopen2_derive" = [ "dep:dlopen2_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "dlopen2_derive" "symbor" "wrapper" ];
      };
      "dlopen2_derive" = rec {
        crateName = "dlopen2_derive";
        version = "0.4.0";
        edition = "2021";
        sha256 = "0m2cpmwki0lklcql1n6zyijhidb5lqrxv3f2xd2zbmv273q9pfgj";
        procMacro = true;
        authors = [
          "Szymon Wieloch <szymon.wieloch@gmail.com>"
          "OpenByte <development.openbyte@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            features = [ "extra-traits" ];
          }
        ];

      };
      "dpi" = rec {
        crateName = "dpi";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0lzz48gpgbwdrw0s8vib0589ij9jizv1vzsphm4xd9kw58lhwp7j";
        features = {
          "mint" = [ "dep:mint" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "dtoa" = rec {
        crateName = "dtoa";
        version = "1.0.9";
        edition = "2018";
        sha256 = "0lv6zzgrd3hfh83n9jqhzz8645729hv1wclag8zw4dbmx3w2pfyw";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "dtoa-short" = rec {
        crateName = "dtoa-short";
        version = "0.3.5";
        edition = "2015";
        sha256 = "11rwnkgql5jilsmwxpx6hjzkgyrbdmx1d71s0jyrjqm5nski25fd";
        authors = [
          "Xidorn Quan <me@upsuper.org>"
        ];
        dependencies = [
          {
            name = "dtoa";
            packageId = "dtoa";
          }
        ];

      };
      "dunce" = rec {
        crateName = "dunce";
        version = "1.0.4";
        edition = "2021";
        sha256 = "0fqcbwfclldbknmawi69l6zyncaiqzxkpbybcb2cc7jmlxnqrkjn";
        authors = [
          "Kornel <kornel@geekhood.net>"
        ];

      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1malmx5f4lkfvqasz319lq6gb3ddg19yzf9s8cykfsgzdmyq0hsl";

      };
      "field-offset" = rec {
        crateName = "field-offset";
        version = "0.3.6";
        edition = "2015";
        sha256 = "0zq5sssaa2ckmcmxxbly8qgz3sxpb8g1lwv90sdh1z74qif2gqiq";
        authors = [
          "Diggory Blake <diggsey@googlemail.com>"
        ];
        dependencies = [
          {
            name = "memoffset";
            packageId = "memoffset";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];

      };
      "flume" = rec {
        crateName = "flume";
        version = "0.11.0";
        edition = "2018";
        sha256 = "10girdbqn77wi802pdh55lwbmymy437k7kklnvj12aaiwaflbb2m";
        authors = [
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spin";
            packageId = "spin";
            rename = "spin1";
            features = [ "mutex" ];
          }
        ];
        features = {
          "async" = [ "futures-sink" "futures-core" ];
          "default" = [ "async" "select" "eventual-fairness" ];
          "eventual-fairness" = [ "select" "nanorand" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "nanorand" = [ "dep:nanorand" ];
        };
        resolvedDefaultFeatures = [ "async" "futures-core" "futures-sink" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0rfr2zfxnx9rz3292z5nyk8qs2iirznn5ff3rd4vgdwza6mdjdyp";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-macros";
            packageId = "foreign-types-macros";
          }
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "foreign-types-macros/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foreign-types-macros" = rec {
        crateName = "foreign-types-macros";
        version = "0.2.3";
        edition = "2018";
        sha256 = "0hjpii8ny6l7h7jpns2cp9589016l8mlrpaigcnayjn9bdc6qp0s";
        procMacro = true;
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            features = [ "full" ];
          }
        ];
        features = { };
        resolvedDefaultFeatures = [ "std" ];
      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0nykdvv41a3d4py61bylmlwjhhvdm0b3bcj9vxhqgxaxnp5ik6ma";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "percent-encoding/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" "percent-encoding/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "fossbeamer" = rec {
        crateName = "fossbeamer";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          {
            name = "fossbeamer";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter; src = ./.; };
        dependencies = [
          {
            name = "rumqttc";
            packageId = "rumqttc";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tao";
            packageId = "tao";
          }
          {
            name = "wry";
            packageId = "wry";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 2.0.3";
          }
        ];

      };
      "futf" = rec {
        crateName = "futf";
        version = "0.1.5";
        edition = "2015";
        sha256 = "0hvqk2r7v4fnc34hvc3vkri89gn52d5m9ihygmwn75l1hhp0whnz";
        authors = [
          "Keegan McAllister <kmcallister@mozilla.com>"
        ];
        dependencies = [
          {
            name = "mac";
            packageId = "mac";
          }
          {
            name = "new_debug_unreachable";
            packageId = "new_debug_unreachable";
          }
        ];

      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.30";
        edition = "2018";
        sha256 = "0y6b7xxqdjm9hlcjpakcg41qfl7lihf6gavk8fyqijsxhvbzgj7a";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "default" = [ "std" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.30";
        edition = "2018";
        sha256 = "07aslayrn3lbggj54kci0ishmd1pr367fp7iks7adia1p05miinz";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.30";
        edition = "2018";
        sha256 = "07dh08gs9vfll2h36kq32q9xd86xm6lyl9xikmmwlkqnmrrgqxm5";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.30";
        edition = "2018";
        sha256 = "1hgh25isvsr4ybibywhr4dpys8mjnscw4wfxxwca70cn1gi26im4";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.30";
        edition = "2018";
        sha256 = "1b49qh9d402y8nka4q6wvvj0c88qq91wbr192mdn5h54nzs0qxc7";
        procMacro = true;
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            features = [ "full" ];
          }
        ];

      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.30";
        edition = "2018";
        sha256 = "1dag8xyyaya8n8mh8smx7x6w2dpmafg2din145v973a3hw7f1f4z";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.30";
        edition = "2018";
        sha256 = "013h1724454hj8qczp8vvs10qfiqrxr937qsrv6rhii68ahlzn1q";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.30";
        edition = "2018";
        sha256 = "0j0xqhcir1zf2dcbpd421kgw6wvsk0rpxflylcysn1rlp3g02r1x";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "default" "futures-macro" "slab" "std" ];
      };
      "fxhash" = rec {
        crateName = "fxhash";
        version = "0.2.1";
        edition = "2015";
        sha256 = "037mb9ichariqi45xm6mz0b11pa92gj38ba0409z3iz239sns6y3";
        libPath = "lib.rs";
        authors = [
          "cbreeden <github@u.breeden.cc>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];

      };
      "gdk" = rec {
        crateName = "gdk";
        version = "0.18.0";
        edition = "2021";
        sha256 = "0iinlc369mrp5aj4fcw5ppb1fx1dxnckd5gwvfy5xdzkvqdhifpm";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
          }
          {
            name = "gdk-pixbuf";
            packageId = "gdk-pixbuf";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
            rename = "ffi";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango";
            packageId = "pango";
          }
        ];
        features = {
          "v3_24" = [ "ffi/v3_24" ];
        };
      };
      "gdk-pixbuf" = rec {
        crateName = "gdk-pixbuf";
        version = "0.18.5";
        edition = "2021";
        sha256 = "1v7svvl0g7zybndmis5inaqqgi1mvcc6s1n8rkb31f5zn3qzbqah";
        libName = "gdk_pixbuf";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
            rename = "ffi";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "v2_40" = [ "ffi/v2_40" ];
          "v2_42" = [ "v2_40" "ffi/v2_42" ];
        };
      };
      "gdk-pixbuf-sys" = rec {
        crateName = "gdk-pixbuf-sys";
        version = "0.18.0";
        edition = "2021";
        sha256 = "1xya543c4ffd2n7aiwwrdxsyc9casdbasafi6ixcknafckm3k61z";
        libName = "gdk_pixbuf_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gio-sys";
            packageId = "gio-sys";
            rename = "gio";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v2_42" = [ "v2_40" ];
        };
      };
      "gdk-sys" = rec {
        crateName = "gdk-sys";
        version = "0.18.0";
        edition = "2021";
        links = "gdk-3";
        sha256 = "1whznljhqqni5sk1qwazkc75ik5gmc1zh8590cbswv9qndn8bzri";
        libName = "gdk_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
            rename = "cairo";
          }
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
            rename = "gdk_pixbuf";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
            rename = "gio";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
            rename = "pango";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = { };
      };
      "gdkwayland-sys" = rec {
        crateName = "gdkwayland-sys";
        version = "0.18.0";
        edition = "2021";
        sha256 = "0jixgzkmlvxrifjq55j11ij1xfxmxyl4jahrj8vxjr9w0dfby3x9";
        libName = "gdk_wayland_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
            rename = "gdk";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v3_24" = [ "gdk/v3_24" ];
          "v3_24_22" = [ "v3_24" ];
        };
      };
      "gdkx11" = rec {
        crateName = "gdkx11";
        version = "0.18.0";
        edition = "2021";
        sha256 = "1klwrpwsap76m879gzivcafwnd3wpnf3i40jj9whylwxj2jahbnv";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gdk";
            packageId = "gdk";
          }
          {
            name = "gdkx11-sys";
            packageId = "gdkx11-sys";
            rename = "ffi";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "x11";
            packageId = "x11";
          }
        ];
        features = {
          "v3_24" = [ "ffi/v3_24_2" ];
        };
      };
      "gdkx11-sys" = rec {
        crateName = "gdkx11-sys";
        version = "0.18.0";
        edition = "2021";
        sha256 = "0hrhnm5gll7rmg2kr3q2qf1ghky9f1f0z6dq74lssv749q7z1s7y";
        libName = "gdk_x11_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
            rename = "gdk";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "x11";
            packageId = "x11";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "cairo" = [ "dep:cairo" ];
          "v3_24_2" = [ "v3_24" "cairo" ];
        };
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" ];
      };
      "getrandom 0.1.16" = rec {
        crateName = "getrandom";
        version = "0.1.16";
        edition = "2018";
        sha256 = "1kjzmz60qx9mn615ks1akjbf36n3lkv27zfwbcam0fzmj56wphwg";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.9.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js-sys" = [ "dep:js-sys" ];
          "log" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "stdweb" = [ "dep:stdweb" ];
          "test-in-browser" = [ "wasm-bindgen" ];
          "wasm-bindgen" = [ "bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "getrandom 0.2.15" = rec {
        crateName = "getrandom";
        version = "0.2.15";
        edition = "2018";
        sha256 = "1mzlnrb3dgyd1fb84gvw10pyr8wdqdl4ry4sr64i1s8an66pqmn4";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [ "wasm-bindgen" "js-sys" ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.29.0";
        edition = "2018";
        sha256 = "1zgzprnjaawmg6zyic4f2q2hc39kdhn116qnkqpgvsasgc3x9v20";
        features = {
          "default" = [ "read-all" "write" ];
          "endian-reader" = [ "read" "dep:stable_deref_trait" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "read" = [ "read-core" ];
          "read-all" = [ "read" "std" "fallible-iterator" "endian-reader" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" "dep:compiler_builtins" ];
          "std" = [ "fallible-iterator?/std" "stable_deref_trait?/std" ];
          "write" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [ "read" "read-core" ];
      };
      "gio" = rec {
        crateName = "gio";
        version = "0.18.4";
        edition = "2021";
        sha256 = "0wsc6mnx057s4ailacg99dwgna38dbqli5x7a6y9rdw75x9qzz6l";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
            rename = "ffi";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            features = [ "io" ];
          }
        ];
        features = {
          "v2_58" = [ "ffi/v2_58" "glib/v2_58" ];
          "v2_60" = [ "v2_58" "ffi/v2_60" "glib/v2_60" ];
          "v2_62" = [ "v2_60" "ffi/v2_62" "glib/v2_62" ];
          "v2_64" = [ "v2_62" "ffi/v2_64" "glib/v2_64" ];
          "v2_66" = [ "v2_64" "ffi/v2_66" "glib/v2_66" ];
          "v2_68" = [ "v2_66" "ffi/v2_68" "glib/v2_68" ];
          "v2_70" = [ "v2_68" "ffi/v2_70" "glib/v2_70" ];
          "v2_72" = [ "v2_70" "ffi/v2_72" "glib/v2_72" ];
          "v2_74" = [ "v2_72" "ffi/v2_74" "glib/v2_74" ];
          "v2_76" = [ "v2_74" "ffi/v2_76" "glib/v2_76" ];
          "v2_78" = [ "v2_76" "ffi/v2_78" "glib/v2_78" ];
        };
        resolvedDefaultFeatures = [ "v2_58" "v2_60" "v2_62" "v2_64" "v2_66" "v2_68" "v2_70" ];
      };
      "gio-sys" = rec {
        crateName = "gio-sys";
        version = "0.18.1";
        edition = "2021";
        sha256 = "1lip8z35iy9d184x2qwjxlbxi64q9cpayy7v1p5y9xdsa3w6smip";
        libName = "gio_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "ws2def" "winsock2" ];
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v2_60" = [ "v2_58" ];
          "v2_62" = [ "v2_60" ];
          "v2_64" = [ "v2_62" ];
          "v2_66" = [ "v2_64" ];
          "v2_68" = [ "v2_66" ];
          "v2_70" = [ "v2_68" ];
          "v2_72" = [ "v2_70" ];
          "v2_74" = [ "v2_72" ];
          "v2_76" = [ "v2_74" ];
          "v2_78" = [ "v2_76" ];
        };
        resolvedDefaultFeatures = [ "v2_58" "v2_60" "v2_62" "v2_64" "v2_66" "v2_68" "v2_70" ];
      };
      "glib" = rec {
        crateName = "glib";
        version = "0.18.5";
        edition = "2021";
        sha256 = "1r8fw0627nmn19bgk3xpmcfngx3wkn7mcpq5a8ma3risx3valg93";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
            rename = "gio_ffi";
            optional = true;
          }
          {
            name = "glib-macros";
            packageId = "glib-macros";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "ffi";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject_ffi";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" "const_generics" "const_new" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "default" = [ "gio" ];
          "gio" = [ "gio_ffi" ];
          "gio_ffi" = [ "dep:gio_ffi" ];
          "log" = [ "rs-log" ];
          "log_macros" = [ "log" ];
          "rs-log" = [ "dep:rs-log" ];
          "v2_58" = [ "ffi/v2_58" "gobject_ffi/v2_58" ];
          "v2_60" = [ "v2_58" "ffi/v2_60" ];
          "v2_62" = [ "v2_60" "ffi/v2_62" "gobject_ffi/v2_62" ];
          "v2_64" = [ "v2_62" "ffi/v2_64" ];
          "v2_66" = [ "v2_64" "ffi/v2_66" "gobject_ffi/v2_66" ];
          "v2_68" = [ "v2_66" "ffi/v2_68" "gobject_ffi/v2_68" ];
          "v2_70" = [ "v2_68" "ffi/v2_70" "gobject_ffi/v2_70" ];
          "v2_72" = [ "v2_70" "ffi/v2_72" "gobject_ffi/v2_72" ];
          "v2_74" = [ "v2_72" "ffi/v2_74" "gobject_ffi/v2_74" ];
          "v2_76" = [ "v2_74" "ffi/v2_76" "gobject_ffi/v2_76" ];
          "v2_78" = [ "v2_76" "ffi/v2_78" "gobject_ffi/v2_78" ];
        };
        resolvedDefaultFeatures = [ "default" "gio" "gio_ffi" "v2_58" "v2_60" "v2_62" "v2_64" "v2_66" "v2_68" "v2_70" ];
      };
      "glib-macros" = rec {
        crateName = "glib-macros";
        version = "0.18.5";
        edition = "2021";
        sha256 = "1p5cla53fcp195zp0hkqpmnn7iwmkdswhy7xh34002bw8y7j5c0b";
        procMacro = true;
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 2.0.2";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            features = [ "full" ];
          }
        ];

      };
      "glib-sys" = rec {
        crateName = "glib-sys";
        version = "0.18.1";
        edition = "2021";
        sha256 = "164qhsfmlzd5mhyxs8123jzbdfldwxbikfpq5cysj3lddbmy4g06";
        libName = "glib_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v2_60" = [ "v2_58" ];
          "v2_62" = [ "v2_60" ];
          "v2_64" = [ "v2_62" ];
          "v2_66" = [ "v2_64" ];
          "v2_68" = [ "v2_66" ];
          "v2_70" = [ "v2_68" ];
          "v2_72" = [ "v2_70" ];
          "v2_74" = [ "v2_72" ];
          "v2_76" = [ "v2_74" ];
          "v2_78" = [ "v2_76" ];
        };
        resolvedDefaultFeatures = [ "v2_58" "v2_60" "v2_62" "v2_64" "v2_66" "v2_68" "v2_70" ];
      };
      "gobject-sys" = rec {
        crateName = "gobject-sys";
        version = "0.18.0";
        edition = "2021";
        sha256 = "0i6fhp3m6vs3wkzyc22rk2cqj68qvgddxmpaai34l72da5xi4l08";
        libName = "gobject_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v2_62" = [ "v2_58" ];
          "v2_66" = [ "v2_62" ];
          "v2_68" = [ "v2_66" ];
          "v2_70" = [ "v2_68" ];
          "v2_72" = [ "v2_70" ];
          "v2_74" = [ "v2_72" ];
          "v2_76" = [ "v2_74" ];
          "v2_78" = [ "v2_74" ];
        };
        resolvedDefaultFeatures = [ "v2_58" "v2_62" "v2_66" "v2_68" "v2_70" ];
      };
      "gtk" = rec {
        crateName = "gtk";
        version = "0.18.1";
        edition = "2021";
        sha256 = "0349cpwasirgxqgsf3md0m5p9nixzsknvw55643f2q0bwbhgbi4k";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "atk";
            packageId = "atk";
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
          }
          {
            name = "field-offset";
            packageId = "field-offset";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "gdk";
            packageId = "gdk";
          }
          {
            name = "gdk-pixbuf";
            packageId = "gdk-pixbuf";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
            rename = "ffi";
          }
          {
            name = "gtk3-macros";
            packageId = "gtk3-macros";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango";
            packageId = "pango";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "gio_v2_58" = [ "gio/v2_58" ];
          "v3_24" = [ "ffi/v3_24" ];
          "v3_24_1" = [ "v3_24" "ffi/v3_24_1" ];
          "v3_24_11" = [ "v3_24_9" "ffi/v3_24_11" ];
          "v3_24_30" = [ "v3_24_11" "ffi/v3_24_30" ];
          "v3_24_8" = [ "v3_24_1" "ffi/v3_24_8" ];
          "v3_24_9" = [ "v3_24_8" "ffi/v3_24_9" ];
        };
      };
      "gtk-sys" = rec {
        crateName = "gtk-sys";
        version = "0.18.0";
        edition = "2021";
        links = "gtk-3";
        sha256 = "08kpdl7ldj8lyv4dyhp9pdk61qj8yyyha5f1jssc1hg23nzkf53p";
        libName = "gtk_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "atk-sys";
            packageId = "atk-sys";
            rename = "atk";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
            rename = "cairo";
          }
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
            rename = "gdk_pixbuf";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
            rename = "gdk";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
            rename = "gio";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
            rename = "pango";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v3_24_1" = [ "v3_24" ];
          "v3_24_11" = [ "v3_24_9" ];
          "v3_24_30" = [ "v3_24_11" ];
          "v3_24_8" = [ "v3_24_1" ];
          "v3_24_9" = [ "v3_24_8" ];
        };
      };
      "gtk3-macros" = rec {
        crateName = "gtk3-macros";
        version = "0.18.0";
        edition = "2021";
        sha256 = "0pnpp8bddisgyd1m39xhrw6kd9lawqd2xxvxzdl2jn6vcgxkw1n6";
        procMacro = true;
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            features = [ "full" ];
          }
        ];

      };
      "hashbrown 0.12.3" = rec {
        crateName = "hashbrown";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1268ka4750pyg2pbgsr43f0289l5zah4arir2k4igx5a8c6fg7la";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "hashbrown 0.14.5" = rec {
        crateName = "hashbrown";
        version = "0.14.5";
        edition = "2021";
        sha256 = "1wa1vy1xs3mp11bn3z9dv0jricgr6a2j0zkf1g19yz3vw4il89z5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" "allocator-api2" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "allocator-api2?/nightly" "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "heck 0.3.3" = rec {
        crateName = "heck";
        version = "0.3.3";
        edition = "2018";
        sha256 = "0b0kkr790p66lvzn9nsmfjvydrbmh9z5gb664jchwgw64vxiwqkd";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];

      };
      "heck 0.4.1" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "heck 0.5.0" = rec {
        crateName = "heck";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1sjmpsdl8czyh9ywl3qcsfsq9a307dg4ni2vnlwgnzzqhc4y0113";

      };
      "html5ever" = rec {
        crateName = "html5ever";
        version = "0.26.0";
        edition = "2018";
        sha256 = "1dx3lhfwngi21wa79cpjv5rd4wn5vmklr50wrwbryidq92mqr9my";
        authors = [
          "The html5ever Project Developers"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mac";
            packageId = "mac";
          }
          {
            name = "markup5ever";
            packageId = "markup5ever";
          }
        ];
        buildDependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" "full" "fold" ];
          }
        ];

      };
      "http" = rec {
        crateName = "http";
        version = "1.1.0";
        edition = "2018";
        sha256 = "0n426lmcxas6h75c2cp25m933pswlrfjz10v91vc62vib2sdvf91";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa 1.0.11";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "idna" = rec {
        crateName = "idna";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1xhjrcjqq0l5bpzvdgylvpkgk94panxgsirzhjnnqfdgc4a9nkb3";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
            usesDefaultFeatures = false;
            features = [ "hardcoded-data" ];
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "unicode-bidi/std" "unicode-normalization/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "indexmap 1.9.3" = rec {
        crateName = "indexmap";
        version = "1.9.3";
        edition = "2021";
        sha256 = "16dxmy7yvk51wvnih3a3im6fp5lmx0wx76i03n06wyak6cwhw1xx";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" ];
        };
      };
      "indexmap 2.2.6" = rec {
        crateName = "indexmap";
        version = "2.2.6";
        edition = "2021";
        sha256 = "09hgwi2ig0wyj5rjziia76zmhgfj95k0jb4ic3iiawm4vlavg3qn";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.13";
        edition = "2018";
        sha256 = "08h27kzvb5jw74mh0ajv0nv9ggwvgqm8ynjsn2sa9jsks4cjh970";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "js-sys" = [ "dep:js-sys" ];
          "stdweb" = [ "dep:stdweb" ];
          "wasm-bindgen" = [ "js-sys" "wasm-bindgen_rs" "web-sys" ];
          "wasm-bindgen_rs" = [ "dep:wasm-bindgen_rs" ];
          "web-sys" = [ "dep:web-sys" ];
        };
      };
      "itoa 0.4.8" = rec {
        crateName = "itoa";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1m1dairwyx8kfxi7ab3b5jc71z1vigh9w4shnhiajji9avzr26dp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "itoa 1.0.11" = rec {
        crateName = "itoa";
        version = "1.0.11";
        edition = "2018";
        sha256 = "0nv9cqjwzr3q58qz84dcz63ggc54yhf1yqar1m858m1kfd4g3wa9";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "javascriptcore-rs" = rec {
        crateName = "javascriptcore-rs";
        version = "1.1.2";
        edition = "2021";
        sha256 = "1k3z4pmg46znxfmjqvx63d5zr9vdj070f97wgajzp3yfzzlp2mna";
        libName = "javascriptcore";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "javascriptcore-rs-sys";
            packageId = "javascriptcore-rs-sys";
            rename = "ffi";
          }
        ];
        features = {
          "default" = [ "v2_38" ];
          "v2_28" = [ "ffi/v2_28" ];
          "v2_38" = [ "ffi/v2_38" "v2_28" ];
        };
        resolvedDefaultFeatures = [ "default" "v2_28" "v2_38" ];
      };
      "javascriptcore-rs-sys" = rec {
        crateName = "javascriptcore-rs-sys";
        version = "1.1.1";
        edition = "2021";
        sha256 = "092igagxm561lx65sin2z18jpxzyg0288cfzcrdvg97z2j6yf6xg";
        libName = "javascriptcore_rs_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v2_38" = [ "v2_28" ];
        };
        resolvedDefaultFeatures = [ "v2_28" "v2_38" ];
      };
      "jni" = rec {
        crateName = "jni";
        version = "0.21.1";
        edition = "2018";
        sha256 = "15wczfkr2r45slsljby12ymf2hij8wi5b104ghck9byjnwmsm1qs";
        authors = [
          "Josh Chase <josh@prevoty.com>"
        ];
        dependencies = [
          {
            name = "cesu8";
            packageId = "cesu8";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "combine";
            packageId = "combine";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Globalization" ];
          }
        ];
        buildDependencies = [
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "invocation" = [ "java-locator" "libloading" ];
          "java-locator" = [ "dep:java-locator" ];
          "libloading" = [ "dep:libloading" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "jni-sys" = rec {
        crateName = "jni-sys";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0c01zb9ygvwg9wdx2fii2d39myzprnpqqhy7yizxvjqp5p04pbwf";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "kuchikiki" = rec {
        crateName = "kuchikiki";
        version = "0.8.2";
        edition = "2018";
        sha256 = "1a3d2byx4hzbm23mlkfrgfvmiv9g5g220x8aa5ph95drnxalg7pj";
        authors = [
          "Brave Authors"
          "Ralph Giles <rgiles@brave.com>"
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        dependencies = [
          {
            name = "cssparser";
            packageId = "cssparser";
          }
          {
            name = "html5ever";
            packageId = "html5ever";
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "selectors";
            packageId = "selectors";
          }
        ];

      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.155";
        edition = "2015";
        sha256 = "0z44c53z54znna8n322k5iwg80arxxpdzjj5260pxxzc9a58icwp";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.12";
        edition = "2021";
        sha256 = "05qvxa6g27yyva25a5ghsg85apdxkvr77yhkyhapj6r8vnf8pbq7";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "atomic_usize" "default" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.21";
        edition = "2021";
        sha256 = "074hldq1q8rlzq2s2qa8f25hj4s3gpw71w64vdwzjd01a4g8rvch";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = [ "kv_std" "value-bag/serde" "serde" ];
          "kv_std" = [ "std" "kv" "value-bag/error" ];
          "kv_sval" = [ "kv" "value-bag/sval" "sval" "sval_ref" ];
          "kv_unstable" = [ "kv" "value-bag" ];
          "kv_unstable_serde" = [ "kv_serde" "kv_unstable_std" ];
          "kv_unstable_std" = [ "kv_std" "kv_unstable" ];
          "kv_unstable_sval" = [ "kv_sval" "kv_unstable" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
      };
      "mac" = rec {
        crateName = "mac";
        version = "0.1.1";
        edition = "2015";
        sha256 = "194vc7vrshqff72rl56f9xgb0cazyl4jda7qsv31m5l6xx7hq7n4";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];

      };
      "malloc_buf" = rec {
        crateName = "malloc_buf";
        version = "0.0.6";
        edition = "2015";
        sha256 = "1jqr77j89pwszv51fmnknzvd53i1nkmcr8rjrvcxhm4dx1zr1fv2";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "markup5ever" = rec {
        crateName = "markup5ever";
        version = "0.11.0";
        edition = "2018";
        sha256 = "05mhzsp6lfxla1fgd0ac283b405s6kyj27wj5r6d7wq42jxjj9ks";
        libPath = "lib.rs";
        authors = [
          "The html5ever Project Developers"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "phf";
            packageId = "phf 0.10.1";
          }
          {
            name = "string_cache";
            packageId = "string_cache";
          }
          {
            name = "tendril";
            packageId = "tendril";
          }
        ];
        buildDependencies = [
          {
            name = "phf_codegen";
            packageId = "phf_codegen 0.10.0";
          }
          {
            name = "string_cache_codegen";
            packageId = "string_cache_codegen";
          }
        ];

      };
      "matches" = rec {
        crateName = "matches";
        version = "0.1.10";
        edition = "2015";
        sha256 = "1994402fq4viys7pjhzisj4wcw894l53g798kkm2y74laxk0jci5";
        libPath = "lib.rs";

      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.4";
        edition = "2021";
        sha256 = "18z32bhxrax0fnjikv475z7ii718hq457qwmaryixfxsl2qrmjkq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.9.1";
        edition = "2015";
        sha256 = "12i17wh9a9plx869g7j4whf62xw68k5zd4k0k5nh6ys5mszid028";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = { };
        resolvedDefaultFeatures = [ "default" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.7.4";
        edition = "2018";
        sha256 = "024wv14aa75cvik7005s5y2nfc8zfidddbd7g55g7sjgnzfl18mq";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler";
            packageId = "adler";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler/rustc-dep-of-std" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
      };
      "mio" = rec {
        crateName = "mio";
        version = "0.8.11";
        edition = "2018";
        sha256 = "034byyl0ardml5yliy1hmvx8arkmn9rv479pid794sm07ia519m4";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "net" "os-ext" "os-poll" ];
      };
      "ndk" = rec {
        crateName = "ndk";
        version = "0.7.0";
        edition = "2018";
        sha256 = "180sjpyf1ylqgqw4ni8jcg3kv96vvrddzamknp4730kiwjvj4525";
        authors = [
          "The Rust Windowing contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            rename = "ffi";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.5.2";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "all" = [ "audio" "bitmap" "media" "api-level-30" ];
          "api-level-24" = [ "api-level-23" ];
          "api-level-25" = [ "api-level-24" ];
          "api-level-26" = [ "api-level-25" ];
          "api-level-27" = [ "api-level-26" ];
          "api-level-28" = [ "api-level-27" ];
          "api-level-29" = [ "api-level-28" ];
          "api-level-30" = [ "api-level-29" ];
          "audio" = [ "ffi/audio" "api-level-26" ];
          "bitmap" = [ "ffi/bitmap" ];
          "jni" = [ "dep:jni" ];
          "jni-glue" = [ "dep:jni-glue" ];
          "media" = [ "ffi/media" ];
          "test" = [ "ffi/test" "jni" "jni-glue" "all" ];
        };
      };
      "ndk-context" = rec {
        crateName = "ndk-context";
        version = "0.1.1";
        edition = "2021";
        sha256 = "12sai3dqsblsvfd1l1zab0z6xsnlha3xsfl7kagdnmj3an3jvc17";
        authors = [
          "The Rust Windowing contributors"
        ];

      };
      "ndk-sys" = rec {
        crateName = "ndk-sys";
        version = "0.4.1+23.1.7779620";
        edition = "2018";
        sha256 = "18z5xsnrnpq65aspavb8cg925m3scs8hb1b9a2n2q8xxb3lsmwiw";
        authors = [
          "The Rust Windowing contributors"
        ];
        dependencies = [
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
        ];
        features = { };
      };
      "new_debug_unreachable" = rec {
        crateName = "new_debug_unreachable";
        version = "1.0.6";
        edition = "2021";
        sha256 = "11phpf1mjxq6khk91yzcbd3ympm78m3ivl7xg6lg2c0lf66fy3k5";
        libName = "debug_unreachable";
        authors = [
          "Matt Brubeck <mbrubeck@limpet.net>"
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];

      };
      "nodrop" = rec {
        crateName = "nodrop";
        version = "0.1.14";
        edition = "2015";
        sha256 = "1fz1v9r8ijacf0hlq0pdv5l9mz8vgqg1snmhvpjmi9aci1b4mvvj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "nodrop-union" = [ "dep:nodrop-union" ];
          "use_union" = [ "nodrop-union" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.5.11";
        edition = "2018";
        sha256 = "1japmqhcxwn1d3k7q8jw58y7xfby51s16nzd6dkj483cj2pnqr0z";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.5.11";
        edition = "2018";
        sha256 = "16f7r4jila0ckcgdnfgqyhhb90w9m2pdbwayyqmwcci0j6ygkgyw";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "parsing" ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [ "proc-macro-crate" "std" ];
      };
      "objc" = rec {
        crateName = "objc";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1cbpf6kz8a244nn1qzl3xyhmp05gsg4n313c9m3567625d3innwi";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "malloc_buf";
            packageId = "malloc_buf";
          }
          {
            name = "objc_exception";
            packageId = "objc_exception";
            optional = true;
          }
        ];
        features = {
          "exception" = [ "objc_exception" ];
          "objc_exception" = [ "dep:objc_exception" ];
        };
        resolvedDefaultFeatures = [ "exception" "objc_exception" ];
      };
      "objc_exception" = rec {
        crateName = "objc_exception";
        version = "0.1.2";
        edition = "2015";
        sha256 = "191cmdmlypp6piw67y4m8y5swlxf5w0ss8n1lk5xd2l1ans0z5xd";
        authors = [
          "Steven Sheldon"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "objc_id" = rec {
        crateName = "objc_id";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0fq71hnp2sdblaighjc82yrac3adfmqzhpr11irhvdfp9gdlsbf9";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "objc";
            packageId = "objc";
          }
        ];

      };
      "object" = rec {
        crateName = "object";
        version = "0.36.1";
        edition = "2018";
        sha256 = "1kng5iqp4az48kn2vfd1irv12yp0yvj25agizlcgrpan3mnq86q8";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [ "read" "write" "build" "std" "compression" "wasm" ];
          "alloc" = [ "dep:alloc" ];
          "build" = [ "build_core" "write_std" "elf" ];
          "build_core" = [ "read_core" "write_core" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [ "dep:flate2" "dep:ruzstd" "std" ];
          "core" = [ "dep:core" ];
          "default" = [ "read" "compression" ];
          "doc" = [ "read_core" "write_std" "build_core" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" "xcoff" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "archive" "coff" "elf" "macho" "pe" "xcoff" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std" ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [ "all" "unstable" ];
          "wasm" = [ "dep:wasmparser" ];
          "write" = [ "write_std" "coff" "elf" "macho" "pe" "xcoff" ];
          "write_core" = [ "dep:crc32fast" "dep:indexmap" "dep:hashbrown" ];
          "write_std" = [ "write_core" "std" "indexmap?/std" "crc32fast?/std" ];
        };
        resolvedDefaultFeatures = [ "archive" "coff" "elf" "macho" "pe" "read_core" "unaligned" "xcoff" ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.19.0";
        edition = "2021";
        sha256 = "14kvw7px5z96dk4dwdm1r9cqhhy2cyj1l5n5b29mynbb8yr15nrz";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1kq18qm48rvkwgcggfkqq6pm948190czqc94d6bm2sir5hq1l0gz";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "pango" = rec {
        crateName = "pango";
        version = "0.18.3";
        edition = "2021";
        sha256 = "1r5ygq7036sv7w32kp8yxr6vgggd54iaavh3yckanmq4xg0px8kw";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
            rename = "ffi";
          }
        ];
        features = {
          "v1_42" = [ "ffi/v1_42" ];
          "v1_44" = [ "v1_42" "ffi/v1_44" ];
          "v1_46" = [ "v1_44" "ffi/v1_46" ];
          "v1_48" = [ "v1_46" "ffi/v1_48" ];
          "v1_50" = [ "v1_48" "ffi/v1_50" ];
          "v1_52" = [ "v1_50" "ffi/v1_52" ];
        };
      };
      "pango-sys" = rec {
        crateName = "pango-sys";
        version = "0.18.0";
        edition = "2021";
        sha256 = "1iaxalcaaj59cl9n10svh4g50v8jrc1a36kd7n9yahx8j7ikfrs3";
        libName = "pango_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v1_44" = [ "v1_42" ];
          "v1_46" = [ "v1_44" ];
          "v1_48" = [ "v1_46" ];
          "v1_50" = [ "v1_48" ];
          "v1_52" = [ "v1_50" ];
        };
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.3";
        edition = "2021";
        sha256 = "09ws9g6245iiq8z975h8ycf818a66q3c6zv4b5h8skpm7hc1igzi";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.10";
        edition = "2021";
        sha256 = "1y3cf9ld9ijf7i4igwzffcn0xl16dxyn4c5bwgjck1dkgabiyh0y";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "phf 0.10.1" = rec {
        crateName = "phf";
        version = "0.10.1";
        edition = "2018";
        sha256 = "0naj8n5nasv5hj5ldlva3cl6y3sv7zp3kfgqylhbrg55v3mg3fzs";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared 0.10.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "phf_macros" "proc-macro-hack" ];
          "phf_macros" = [ "dep:phf_macros" ];
          "proc-macro-hack" = [ "dep:proc-macro-hack" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "phf_shared/std" ];
          "uncased" = [ "phf_shared/uncased" ];
          "unicase" = [ "phf_shared/unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "phf 0.8.0" = rec {
        crateName = "phf";
        version = "0.8.0";
        edition = "2018";
        sha256 = "04pyv8bzqvw69rd5dynd5nb85py1hf7wa4ixyhrvdz1l5qin3yrx";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_macros";
            packageId = "phf_macros";
            optional = true;
          }
          {
            name = "phf_shared";
            packageId = "phf_shared 0.8.0";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "phf_macros" "proc-macro-hack" ];
          "phf_macros" = [ "dep:phf_macros" ];
          "proc-macro-hack" = [ "dep:proc-macro-hack" ];
          "std" = [ "phf_shared/std" ];
          "unicase" = [ "phf_shared/unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "macros" "phf_macros" "proc-macro-hack" "std" ];
      };
      "phf_codegen 0.10.0" = rec {
        crateName = "phf_codegen";
        version = "0.10.0";
        edition = "2018";
        sha256 = "1k8kdad9wk2d5972k6jmjki2xpdy2ky4zd19rv7ybm2dpjlc7cag";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator 0.10.0";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared 0.10.0";
          }
        ];

      };
      "phf_codegen 0.8.0" = rec {
        crateName = "phf_codegen";
        version = "0.8.0";
        edition = "2018";
        sha256 = "05d8w7aqqjb6039pfm6404gk5dlwrrf97kiy1n21212vb1hyxzyb";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator 0.8.0";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared 0.8.0";
          }
        ];

      };
      "phf_generator 0.10.0" = rec {
        crateName = "phf_generator";
        version = "0.10.0";
        edition = "2018";
        crateBin = [ ];
        sha256 = "1mlq6hlajsvlsx6rhw49g9ricsm017lrxmgmmbk85sxm7f4qaljx";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared 0.10.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "small_rng" ];
          }
        ];
        features = {
          "criterion" = [ "dep:criterion" ];
        };
      };
      "phf_generator 0.8.0" = rec {
        crateName = "phf_generator";
        version = "0.8.0";
        edition = "2018";
        crateBin = [ ];
        sha256 = "09i5338d1kixq6a60fcayz6awgxjlxcfw9ic5f02abbgr067ydhp";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared 0.8.0";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
            features = [ "small_rng" ];
          }
        ];
        features = {
          "criterion" = [ "dep:criterion" ];
        };
      };
      "phf_macros" = rec {
        crateName = "phf_macros";
        version = "0.8.0";
        edition = "2018";
        sha256 = "170qm6yqn6b9mjlwb2xmm3iad9d5nzwgfawfwy7zr7s2zwcdwvvz";
        procMacro = true;
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator 0.8.0";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared 0.8.0";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];

      };
      "phf_shared 0.10.0" = rec {
        crateName = "phf_shared";
        version = "0.10.0";
        edition = "2018";
        sha256 = "15n02nc8yqpd8hbxngblar2g53p3nllc93d8s8ih3p5cf7bnlydn";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];
        features = {
          "default" = [ "std" ];
          "uncased" = [ "dep:uncased" ];
          "unicase" = [ "dep:unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "phf_shared 0.8.0" = rec {
        crateName = "phf_shared";
        version = "0.8.0";
        edition = "2018";
        sha256 = "1xssnqrrcn0nr9ayqrnm8xm37ac4xvwcx8pax7jxss7yxawzh360";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];
        features = {
          "default" = [ "std" ];
          "unicase" = [ "dep:unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.14";
        edition = "2018";
        sha256 = "00nx3f04agwjlsmd3mc5rx5haibj2v8q9b52b0kwn63wcv4nz9mx";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.30";
        edition = "2015";
        sha256 = "1v07557dj1sa0aly9c90wsygc0i8xv5vnmyv0g94lpkvj8qb4cfj";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.17";
        edition = "2018";
        sha256 = "1pp6g52aw970adv3x2310n7glqnji96z0a9wiamzw89ibf0ayh2v";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "precomputed-hash" = rec {
        crateName = "precomputed-hash";
        version = "0.1.1";
        edition = "2015";
        sha256 = "075k9bfy39jhs53cb2fpb9klfakx2glxnf28zdw08ws6lgpq6lwj";
        authors = [
          "Emilio Cobos Álvarez <emilio@crisal.io>"
        ];

      };
      "proc-macro-crate 1.3.1" = rec {
        crateName = "proc-macro-crate";
        version = "1.3.1";
        edition = "2021";
        sha256 = "069r1k56bvgk0f58dm5swlssfcp79im230affwk6d9ck20g04k3z";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.19.15";
          }
        ];

      };
      "proc-macro-crate 2.0.2" = rec {
        crateName = "proc-macro-crate";
        version = "2.0.2";
        edition = "2021";
        sha256 = "092x5acqnic14cw6vacqap5kgknq3jn4c6jij9zi6j85839jc3xh";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.20.2";
          }
        ];

      };
      "proc-macro-error" = rec {
        crateName = "proc-macro-error";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1373bhxaf0pagd8zkyd03kkx6bchzf6g0dkwrwzsnal9z47lj9fs";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr";
            packageId = "proc-macro-error-attr";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn" = [ "dep:syn" ];
          "syn-error" = [ "syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn" "syn-error" ];
      };
      "proc-macro-error-attr" = rec {
        crateName = "proc-macro-error-attr";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0sgq6m5jfmasmwwy8x4mjygx5l7kp8s4j60bv25ckv2j1qc41gm1";
        procMacro = true;
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];

      };
      "proc-macro-hack" = rec {
        crateName = "proc-macro-hack";
        version = "0.5.20+deprecated";
        edition = "2018";
        sha256 = "0s402hmcs3k9nd6rlp07zkr1lz7yimkmcwcbgnly2zr44wamwdyw";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.86";
        edition = "2021";
        sha256 = "0xrv22p8lqlfdf1w0pj4si8n2ws4aw0kilmziwf0vpv5ys6rwway";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.36";
        edition = "2018";
        sha256 = "19xcmh445bg6simirnnd4fvkmp6v2qiwxh5f6rw4a70h76pnm9qg";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand 0.7.3" = rec {
        crateName = "rand";
        version = "0.7.3";
        edition = "2018";
        sha256 = "00sdaimkbz491qgi6qxkv582yivl32m2jd401kzbn94vsiwicsva";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.2.2";
            usesDefaultFeatures = false;
            target = { target, features }: (!("emscripten" == target."os" or null));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc";
            target = { target, features }: ("emscripten" == target."os" or null);
          }
          {
            name = "rand_pcg";
            packageId = "rand_pcg";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc";
          }
          {
            name = "rand_pcg";
            packageId = "rand_pcg";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "getrandom_package" = [ "dep:getrandom_package" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "nightly" = [ "simd_support" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_pcg" = [ "dep:rand_pcg" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "libc" "rand_pcg" "small_rng" "std" ];
      };
      "rand 0.8.5" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand_core/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "libc" "rand_chacha" "small_rng" "std" "std_rng" ];
      };
      "rand_chacha 0.2.2" = rec {
        crateName = "rand_chacha";
        version = "0.2.2";
        edition = "2018";
        sha256 = "00il36fkdbsmpr99p9ksmmp6dn1md7rmnwmz0rr77jbrca2yvj7l";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_chacha 0.3.1" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core 0.5.1" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_core 0.6.4" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];

      };
      "rand_pcg" = rec {
        crateName = "rand_pcg";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0ab4h6s6x3py833jk61lwadq83qd1c8bih2hgi6yps9rnv0x1aqn";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
      };
      "raw-window-handle 0.5.2" = rec {
        crateName = "raw-window-handle";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1f9k10fgda464ia1b2hni8f0sa8i0bphdsbs3di032x80qgrmzzj";
        authors = [
          "Osspial <osspial@gmail.com>"
        ];
        features = {
          "std" = [ "alloc" ];
        };
      };
      "raw-window-handle 0.6.2" = rec {
        crateName = "raw-window-handle";
        version = "0.6.2";
        edition = "2021";
        sha256 = "0ff5c648hncwx7hm2a8fqgqlbvbl4xawb6v3xxv9wkpjyrr5arr0";
        libName = "raw_window_handle";
        authors = [
          "Osspial <osspial@gmail.com>"
        ];
        features = {
          "std" = [ "alloc" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasm-bindgen-0-2" = [ "wasm-bindgen" "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1zg03n8rjbqnnbzp5nvai2pjgzxf7cw42hpcamgh8mj4y77zhb68";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
      };
      "ring" = rec {
        crateName = "ring";
        version = "0.17.8";
        edition = "2021";
        links = "ring_core_0_17_8";
        sha256 = "03fwlb1ssrmfxdckvqv033pfmk01rhx9ynwi7r186dcfcp5s8zy1";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.15";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && (("aarch64" == target."arch" or null) || ("arm" == target."arch" or null)));
          }
          {
            name = "spin";
            packageId = "spin";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) || ("arm" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
            features = [ "once" ];
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("windows" == target."os" or null));
            features = [ "Win32_Foundation" "Win32_System_Threading" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "std" = [ "alloc" ];
          "wasm32_unknown_unknown_js" = [ "getrandom/js" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" ];
      };
      "rumqttc" = rec {
        crateName = "rumqttc";
        version = "0.24.0";
        edition = "2021";
        sha256 = "1aclgx4lldir2d4c968cr6ac9ldvigs22fpd83wldmdjz8aqwmp1";
        authors = [
          "tekjar <raviteja@bytebeam.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "flume";
            packageId = "flume";
            usesDefaultFeatures = false;
            features = [ "async" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs";
            optional = true;
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile";
            optional = true;
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "macros" "io-util" "net" "time" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
          }
        ];
        features = {
          "default" = [ "use-rustls" ];
          "proxy" = [ "dep:async-http-proxy" ];
          "url" = [ "dep:url" ];
          "use-native-tls" = [ "dep:tokio-native-tls" "dep:native-tls" ];
          "use-rustls" = [ "dep:tokio-rustls" "dep:rustls-webpki" "dep:rustls-pemfile" "dep:rustls-native-certs" ];
          "websocket" = [ "dep:async-tungstenite" "dep:ws_stream_tungstenite" "dep:http" ];
        };
        resolvedDefaultFeatures = [ "default" "use-rustls" ];
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.24";
        edition = "2015";
        sha256 = "07zysaafgrkzy2rjgwqdj2a8qdpsm6zv6f5pgpk9x0lm40z9b6vi";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.4.0";
        edition = "2018";
        sha256 = "0rpk9rcdk405xhbmgclsh4pai0svn49x35aggl4nhbkd4a2zb85z";
        authors = [
          "Dirkjan Ochtman <dirkjan@ochtman.nl>"
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];

      };
      "rustls" = rec {
        crateName = "rustls";
        version = "0.22.4";
        edition = "2021";
        sha256 = "0cl4q6w0x1cl5ldjsgbbiiqhkz6qg5vxl5dkn9wwsyxc44vzfkmz";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "std" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki";
            rename = "webpki";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "aws_lc_rs" = [ "dep:aws-lc-rs" "webpki/aws_lc_rs" ];
          "default" = [ "logging" "ring" "tls12" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "read_buf" = [ "rustversion" ];
          "ring" = [ "dep:ring" "webpki/ring" ];
          "rustversion" = [ "dep:rustversion" ];
        };
        resolvedDefaultFeatures = [ "log" "logging" "ring" "tls12" ];
      };
      "rustls-native-certs" = rec {
        crateName = "rustls-native-certs";
        version = "0.7.1";
        edition = "2021";
        sha256 = "1fjzn7h3p6f3wr014p0i58131513b5li3146v6yrdd2i0r16v3d8";
        dependencies = [
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: ((target."unix" or false) && (!("macos" == target."os" or null)));
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile";
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];

      };
      "rustls-pemfile" = rec {
        crateName = "rustls-pemfile";
        version = "2.1.2";
        edition = "2018";
        sha256 = "0ggpmk5n7p096nim2hn57facx6rwf76l55qqsj4fny37d0jkm699";
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "base64/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustls-pki-types" = rec {
        crateName = "rustls-pki-types";
        version = "1.7.0";
        edition = "2021";
        sha256 = "0banlc9xzwqrx8n0h4bd0igmq3z5hc72rn941lf22cp3gkkraqlp";
        libName = "rustls_pki_types";
        features = {
          "default" = [ "alloc" ];
          "std" = [ "alloc" ];
          "web" = [ "web-time" ];
          "web-time" = [ "dep:web-time" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "rustls-webpki" = rec {
        crateName = "rustls-webpki";
        version = "0.102.5";
        edition = "2021";
        sha256 = "0y2d2qsx02zbgikr6ibsllxqzzf35gva44xm0p0w4hjag76zr9pr";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];
        features = {
          "alloc" = [ "ring?/alloc" "pki-types/alloc" ];
          "aws_lc_rs" = [ "dep:aws-lc-rs" ];
          "default" = [ "std" "ring" ];
          "ring" = [ "dep:ring" ];
          "std" = [ "alloc" "pki-types/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "ring" "std" ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.18";
        edition = "2018";
        sha256 = "17xx2s8j1lln7iackzd9p0sv546vjq71i779gphjq923vjh5pjzk";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "schannel" = rec {
        crateName = "schannel";
        version = "0.1.23";
        edition = "2018";
        sha256 = "0d1m156bsjrws6xzzr1wyfyih9i22mb2csb5pc5kmkrvci2ibjgv";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Steffen Butzer <steffen.butzer@outlook.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            features = [ "Win32_Foundation" "Win32_Security_Cryptography" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_System_Memory" ];
          }
        ];
        devDependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            features = [ "Win32_System_SystemInformation" "Win32_System_Time" ];
          }
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "security-framework" = rec {
        crateName = "security-framework";
        version = "2.11.0";
        edition = "2021";
        sha256 = "1h0ipvv8wi9wvhad0a9w7jpmb189jng4jhfgnp6vl1lps0zp49y6";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" "security-framework-sys/OSX_10_10" ];
          "OSX_10_11" = [ "OSX_10_10" "security-framework-sys/OSX_10_11" ];
          "OSX_10_12" = [ "OSX_10_11" "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [ "OSX_10_12" "security-framework-sys/OSX_10_13" "alpn" "session-tickets" "serial-number-bigint" ];
          "OSX_10_14" = [ "OSX_10_13" "security-framework-sys/OSX_10_14" ];
          "OSX_10_15" = [ "OSX_10_14" "security-framework-sys/OSX_10_15" ];
          "OSX_10_9" = [ "security-framework-sys/OSX_10_9" ];
          "default" = [ "OSX_10_11" ];
          "log" = [ "dep:log" ];
          "serial-number-bigint" = [ "dep:num-bigint" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_10" "OSX_10_11" "OSX_10_9" "default" ];
      };
      "security-framework-sys" = rec {
        crateName = "security-framework-sys";
        version = "2.11.0";
        edition = "2021";
        sha256 = "1mq7ykz3fi0ba55aj4afz24v9qvwdpkbjiirb197f8h5pnxkcy9i";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" ];
          "OSX_10_11" = [ "OSX_10_10" ];
          "OSX_10_12" = [ "OSX_10_11" ];
          "OSX_10_13" = [ "OSX_10_12" ];
          "OSX_10_14" = [ "OSX_10_13" ];
          "OSX_10_15" = [ "OSX_10_14" ];
          "default" = [ "OSX_10_11" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_10" "OSX_10_11" "OSX_10_9" ];
      };
      "selectors" = rec {
        crateName = "selectors";
        version = "0.22.0";
        edition = "2015";
        sha256 = "1zhjpvww238lh4nz7kdw4ywlpmjbmzvrm76w1jyacjxci4c0ycnz";
        libPath = "lib.rs";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cssparser";
            packageId = "cssparser";
          }
          {
            name = "derive_more";
            packageId = "derive_more";
          }
          {
            name = "fxhash";
            packageId = "fxhash";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "phf";
            packageId = "phf 0.8.0";
          }
          {
            name = "precomputed-hash";
            packageId = "precomputed-hash";
          }
          {
            name = "servo_arc";
            packageId = "servo_arc";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thin-slice";
            packageId = "thin-slice";
          }
        ];
        buildDependencies = [
          {
            name = "phf_codegen";
            packageId = "phf_codegen 0.8.0";
          }
        ];
        features = { };
      };
      "semver" = rec {
        crateName = "semver";
        version = "1.0.23";
        edition = "2018";
        sha256 = "12wqpxfflclbq4dv8sa6gchdh92ahhwn4ci1ls22wlby3h57wsb1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.204";
        edition = "2018";
        sha256 = "04kwpwqz559xlhxkggmm8rjxqgywy5swam3kscwsicnbw1cgaxmw";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.204";
        edition = "2015";
        sha256 = "08p25262mbmhsr2cg0508d5b1wvljj956rvpg0v3qgg6gc8pxkg0";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        features = { };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.120";
        edition = "2021";
        sha256 = "1idpv3zxcvl76z2z47jgg1f1wjqdnhfc204asmd27qfam34j23af";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa 1.0.11";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_spanned" = rec {
        crateName = "serde_spanned";
        version = "0.6.6";
        edition = "2021";
        sha256 = "1839b6m5p9ijjmcwamiya2r612ks2vg6w2pp95yg76lr3zh79rkr";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "servo_arc" = rec {
        crateName = "servo_arc";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0cjljr9znwahry6p95xvd3p4pmy24wlf6gbfidnmglg002w3i0nr";
        libPath = "lib.rs";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "nodrop";
            packageId = "nodrop";
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "servo" = [ "serde" ];
        };
      };
      "sha2" = rec {
        crateName = "sha2";
        version = "0.10.8";
        edition = "2018";
        sha256 = "1j1x78zk9il95w9iv46dh9wm73r6xrgj32y6lzzw7bxws9dbfgbr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "0.3.11";
        edition = "2018";
        sha256 = "03axamhmwsrmh0psdw3gf7c0zc4fyl5yjxfifz9qfka6yhkqid9q";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.9";
        edition = "2018";
        sha256 = "0rxvsgir0qw5lkycrqgb1cxsvxzjv9bmx73bk5y42svnzfba94lg";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.13.2";
        edition = "2018";
        sha256 = "0rsw5samawl3wsw6glrsb127rx6sh89a8wyikicw6dkdcjd1lpiw";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "const_generics" "const_new" "union" ];
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.5.7";
        edition = "2021";
        sha256 = "070r941wbq76xpy039an4pyiy3rfj7mp7pvibf1rcri9njq5wc6f";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = { };
        resolvedDefaultFeatures = [ "all" ];
      };
      "soup3" = rec {
        crateName = "soup3";
        version = "0.5.0";
        edition = "2021";
        sha256 = "17sgrkvx5jy6r6pyyhh8cl5mrm96rf0yfl3lqypm24pk815947s7";
        libName = "soup";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "gio";
            packageId = "gio";
            features = [ "v2_70" ];
          }
          {
            name = "glib";
            packageId = "glib";
            features = [ "v2_66" ];
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "soup3-sys";
            packageId = "soup3-sys";
            rename = "ffi";
          }
        ];
        features = {
          "default" = [ "ffi/v3_0" ];
          "v3_2" = [ "ffi/v3_2" ];
          "v3_4" = [ "v3_2" "ffi/v3_4" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "soup3-sys" = rec {
        crateName = "soup3-sys";
        version = "0.5.0";
        edition = "2021";
        sha256 = "09vcp2m0hcddjqsv979d4jnribxp1pvipgjyy4j2z8c0lr88kgky";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gio-sys";
            packageId = "gio-sys";
            rename = "gio";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v3_4" = [ "v3_2" ];
        };
        resolvedDefaultFeatures = [ "v3_0" ];
      };
      "spin" = rec {
        crateName = "spin";
        version = "0.9.8";
        edition = "2015";
        sha256 = "0rvam5r0p3a6qhc18scqpvpgb3ckzyqxpgdfyjnghh8ja7byi039";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
            rename = "lock_api_crate";
            optional = true;
          }
        ];
        features = {
          "barrier" = [ "mutex" ];
          "default" = [ "lock_api" "mutex" "spin_mutex" "rwlock" "once" "lazy" "barrier" ];
          "fair_mutex" = [ "mutex" ];
          "lazy" = [ "once" ];
          "lock_api" = [ "lock_api_crate" ];
          "lock_api_crate" = [ "dep:lock_api_crate" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable_atomic" = [ "portable-atomic" ];
          "spin_mutex" = [ "mutex" ];
          "ticket_mutex" = [ "mutex" ];
          "use_ticket_mutex" = [ "mutex" "ticket_mutex" ];
        };
        resolvedDefaultFeatures = [ "barrier" "default" "lazy" "lock_api" "lock_api_crate" "mutex" "once" "rwlock" "spin_mutex" ];
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "string_cache" = rec {
        crateName = "string_cache";
        version = "0.8.7";
        edition = "2018";
        sha256 = "0fr90a54ibsrnfjq5la77yjd641g6vqv8f1v3pmpbxa2cbkkh4gr";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "new_debug_unreachable";
            packageId = "new_debug_unreachable";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared 0.10.0";
          }
          {
            name = "precomputed-hash";
            packageId = "precomputed-hash";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "default" = [ "serde_support" ];
          "serde" = [ "dep:serde" ];
          "serde_support" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "serde_support" ];
      };
      "string_cache_codegen" = rec {
        crateName = "string_cache_codegen";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1249fafaa7r3m67zxcbcw1bddanygv13r3209bvlzgi2ny4h5cvb";
        libPath = "lib.rs";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator 0.10.0";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared 0.10.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "strum" = rec {
        crateName = "strum";
        version = "0.20.0";
        edition = "2018";
        sha256 = "0p5cslmdnz261kiwmm4h7qsmv9bh83r0f9lq6f2z2mxsnl4wa63k";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        features = {
          "derive" = [ "strum_macros" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
      };
      "strum_macros" = rec {
        crateName = "strum_macros";
        version = "0.20.1";
        edition = "2018";
        sha256 = "0j9ikvxlqzr667ghc045qkpwprjgcfmzgagln7maw4jigawcd2zf";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.3.3";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "parsing" "extra-traits" ];
          }
        ];
        features = { };
      };
      "subtle" = rec {
        crateName = "subtle";
        version = "2.6.1";
        edition = "2018";
        sha256 = "14ijxaymghbl1p0wql9cib5zlwiina7kall6w7g89csprkgbvhhk";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "quote" ];
      };
      "syn 2.0.68" = rec {
        crateName = "syn";
        version = "2.0.68";
        edition = "2021";
        sha256 = "1sf1y2hajhjav38ipg63c934xrgkz4v42fz24a0ckmmri06sf7wh";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote?/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" ];
      };
      "system-deps 2.0.3" = rec {
        crateName = "system-deps";
        version = "2.0.3";
        edition = "2018";
        sha256 = "1vv77bziqh611594fw8cwkdsis1164i6qvpid4a3qbv5znmbhn8v";
        authors = [
          "Guillaume Desmottes <guillaume.desmottes@collabora.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.3.3";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "strum";
            packageId = "strum";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "toml";
            packageId = "toml 0.5.11";
            usesDefaultFeatures = false;
          }
          {
            name = "version-compare";
            packageId = "version-compare 0.0.11";
          }
        ];

      };
      "system-deps 6.2.2" = rec {
        crateName = "system-deps";
        version = "6.2.2";
        edition = "2018";
        sha256 = "0j93ryw031n3h8b0nfpj5xwh3ify636xmv8kxianvlyyipmkbrd3";
        authors = [
          "Guillaume Desmottes <guillaume.desmottes@collabora.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "cfg-expr";
            packageId = "cfg-expr";
            features = [ "targets" ];
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "toml";
            packageId = "toml 0.8.2";
            usesDefaultFeatures = false;
            features = [ "parse" ];
          }
          {
            name = "version-compare";
            packageId = "version-compare 0.2.0";
          }
        ];

      };
      "tao" = rec {
        crateName = "tao";
        version = "0.28.1";
        edition = "2021";
        sha256 = "07s5yfaf8g51pz5i7llq8xgm723nc3lcz80bfjywnbdwbzq8slza";
        authors = [
          "Tauri Programme within The Commons Conservancy"
          "The winit contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cocoa";
            packageId = "cocoa";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "dispatch";
            packageId = "dispatch";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "dlopen2";
            packageId = "dlopen2";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "dpi";
            packageId = "dpi";
          }
          {
            name = "gdkwayland-sys";
            packageId = "gdkwayland-sys";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "gdkx11-sys";
            packageId = "gdkx11-sys";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "gtk";
            packageId = "gtk";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "jni";
            packageId = "jni";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk";
            packageId = "ndk";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "ndk-context";
            packageId = "ndk-context";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (("android" == target."os" or null) || ("windows" == target."os" or null));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
            rename = "rwh_06";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "tao-macros";
            packageId = "tao-macros";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "windows";
            packageId = "windows";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "implement" "Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_System_Com" "Win32_System_Com_StructuredStorage" "Win32_System_DataExchange" "Win32_System_Diagnostics_Debug" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_Ole" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_System_SystemInformation" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging" ];
          }
          {
            name = "windows-core";
            packageId = "windows-core";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "windows-version";
            packageId = "windows-version";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "x11-dl";
            packageId = "x11-dl";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
        ];
        features = {
          "default" = [ "rwh_06" ];
          "rwh_04" = [ "dep:rwh_04" ];
          "rwh_05" = [ "dep:rwh_05" ];
          "rwh_06" = [ "dep:rwh_06" ];
          "serde" = [ "dep:serde" "dpi/serde" ];
        };
        resolvedDefaultFeatures = [ "default" "rwh_06" ];
      };
      "tao-macros" = rec {
        crateName = "tao-macros";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1hhqgmr9yw60nwmw8xwxh44w2h2qz18nhvhkkdk8n5axa214a4gc";
        procMacro = true;
        authors = [
          "Tauri Programme within The Commons Conservancy"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = { };
        resolvedDefaultFeatures = [ "default" ];
      };
      "target-lexicon" = rec {
        crateName = "target-lexicon";
        version = "0.12.14";
        edition = "2018";
        sha256 = "0bzzr5cq1n56nmjp5fkf2h1g9a27lmkbld3qqfvwy6x2j4w41z71";
        authors = [
          "Dan Gohman <sunfish@mozilla.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde_support" = [ "serde" "std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "tendril" = rec {
        crateName = "tendril";
        version = "0.4.3";
        edition = "2015";
        sha256 = "1c3vip59sqwxn148i714nmkrvjzbk7105vj0h92s6r64bw614jnj";
        authors = [
          "Keegan McAllister <mcallister.keegan@gmail.com>"
          "Simon Sapin <simon.sapin@exyr.org>"
          "Chris Morgan <me@chrismorgan.info>"
        ];
        dependencies = [
          {
            name = "futf";
            packageId = "futf";
          }
          {
            name = "mac";
            packageId = "mac";
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        features = {
          "encoding" = [ "dep:encoding" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
        };
      };
      "thin-slice" = rec {
        crateName = "thin-slice";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0g4z51g3yarah89ijpakbwhrrknw6d7k3ry0m1zqcn3hbhiq3alf";
        authors = [
          "Cameron McCormack <cam@mcc.id.au>"
        ];

      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.61";
        edition = "2021";
        sha256 = "028prh962l16cmjivwb1g9xalbpqip0305zhq006mg74dc6whin5";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];

      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.61";
        edition = "2021";
        sha256 = "0cvm37hp0kbcyk1xac1z0chpbd9pbn2g456iyid6sah0a113ihs6";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
          }
        ];

      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.6.1";
        edition = "2018";
        sha256 = "10idfhsvp7zhbr8pn37wfra2bn02vr5xg6mhdvrbxlp2zg31alf5";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.38.0";
        edition = "2021";
        sha256 = "0jjsb2c9dqi93yij3rqzsh9bk0z3qyasmw1n8qkny3d8lw14lkxs";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = { target, features }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
            features = [ "all" ];
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Authorization" ];
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "full" = [ "fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time" ];
          "io-util" = [ "bytes" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "mio" = [ "dep:mio" ];
          "net" = [ "libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [ "bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming" ];
          "rt-multi-thread" = [ "num_cpus" "rt" ];
          "signal" = [ "libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console" ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "socket2" = [ "dep:socket2" ];
          "test-util" = [ "rt" "sync" "time" ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "bytes" "default" "io-util" "libc" "macros" "mio" "net" "rt" "socket2" "time" "tokio-macros" "windows-sys" ];
      };
      "tokio-macros" = rec {
        crateName = "tokio-macros";
        version = "2.3.0";
        edition = "2021";
        sha256 = "16nkan0x9b62hnqmjqcyd71j1mgpda2sv7gfm2mvbm39l2cfjnjz";
        procMacro = true;
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            features = [ "full" ];
          }
        ];

      };
      "tokio-rustls" = rec {
        crateName = "tokio-rustls";
        version = "0.25.0";
        edition = "2021";
        sha256 = "03w6d5aqqf084rmcmrsyq5grhydl53blaiqcl0i2yfnv187hqpkp";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "logging" "tls12" "ring" ];
          "logging" = [ "rustls/logging" ];
          "ring" = [ "rustls/ring" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [ "default" "logging" "ring" "tls12" ];
      };
      "toml 0.5.11" = rec {
        crateName = "toml";
        version = "0.5.11";
        edition = "2018";
        sha256 = "0d2266nx8b3n22c7k24x4428z6di8n83a9n466jm7a2hipfz1xzl";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" ];
        };
      };
      "toml 0.8.2" = rec {
        crateName = "toml";
        version = "0.8.2";
        edition = "2021";
        sha256 = "0g9ysjaqvm2mv8q85xpqfn7hi710hj24sd56k49wyddvvyq8lp8q";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.20.2";
            optional = true;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_edit" ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [ "dep:toml_edit" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "parse" ];
      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.3";
        edition = "2021";
        sha256 = "0jsy7v8bdvmzsci6imj8fzgd255fmy5fzp6zsri14yrry7i77nkw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "toml_edit 0.19.15" = rec {
        crateName = "toml_edit";
        version = "0.19.15";
        edition = "2021";
        sha256 = "08bl7rp5g6jwmfpad9s8jpw8wjrciadpnbaswgywpr9hv9qbfnqv";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.2.6";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow";
          }
        ];
        features = {
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml_edit 0.20.2" = rec {
        crateName = "toml_edit";
        version = "0.20.2";
        edition = "2021";
        sha256 = "0f7k5svmxw98fhi28jpcyv7ldr2s3c867pjbji65bdxjpd44svir";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.2.6";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow";
          }
        ];
        features = {
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.17.0";
        edition = "2018";
        sha256 = "09dqxv69m9lj9zvv6xw5vxaqx15ps0vxyy5myg33i0kbqvq0pzs2";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.15";
        edition = "2018";
        sha256 = "0xcdxm7h0ydyprwpcbh436rbs6s6lph7f3gr527lzgv6lw053y88";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "std" "hardcoded-data" ];
          "flame" = [ "dep:flame" ];
          "flame_it" = [ "flame" "flamer" ];
          "flamer" = [ "dep:flamer" ];
          "serde" = [ "dep:serde" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "hardcoded-data" "std" ];
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.12";
        edition = "2018";
        sha256 = "0jzf1znfpb2gx8nr8mvmyqs1crnv79l57nxnbiszc7xf7ynbjm1k";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.23";
        edition = "2018";
        sha256 = "1x81a50h2zxigj74b9bqjsirxxbyhmis54kg600xj213vf31cvd5";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.11.0";
        edition = "2018";
        sha256 = "00kjpwp1g8fqm45drmwivlacn3y9jx73bvs09n6s3x73nqi7vj6l";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = { };
      };
      "untrusted" = rec {
        crateName = "untrusted";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1ha7ib98vkc538x0z60gfn0fc5whqdd85mb87dvisdcaifi6vjwf";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];

      };
      "url" = rec {
        crateName = "url";
        version = "2.5.2";
        edition = "2018";
        sha256 = "0v2dx50mx7xzl9454cl5qmpjnhkbahmn59gd3apyipbgyyylsy12";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "utf-8" = rec {
        crateName = "utf-8";
        version = "0.7.6";
        edition = "2015";
        sha256 = "1a9ns3fvgird0snjkd3wbdhwd3zdpc2h5gpyybrfr6ra5pkqxk09";
        libName = "utf8";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];

      };
      "version-compare 0.0.11" = rec {
        crateName = "version-compare";
        version = "0.0.11";
        edition = "2018";
        sha256 = "06v688jg6gd00zvm3cp7qh2h3mz8cs2ngr09bnwxhyddxrcwh60w";
        authors = [
          "Tim Visee <3a4fb3964f@sinenomine.email>"
        ];
        features = { };
        resolvedDefaultFeatures = [ "default" ];
      };
      "version-compare 0.2.0" = rec {
        crateName = "version-compare";
        version = "0.2.0";
        edition = "2021";
        sha256 = "12y9262fhjm1wp0aj3mwhads7kv0jz8h168nn5fb8b43nwf9abl5";
        authors = [
          "Tim Visee <3a4fb3964f@sinenomine.email>"
        ];

      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.4";
        edition = "2015";
        sha256 = "0gs8grwdlgh0xq660d7wr80x14vxbizmd8dbp29p2pdncx8lp1s9";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0jsy7a710qv8gld5957ybrnc07gavppp963gs32xk4ag8130jy99";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "wasi 0.11.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.9.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "webkit2gtk" = rec {
        crateName = "webkit2gtk";
        version = "2.0.1";
        edition = "2021";
        sha256 = "06inf9qy6hpymyhk9mpj3bxmi8rba4w0p78pkwgdm0f5ahgbrcbn";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
          }
          {
            name = "gdk";
            packageId = "gdk";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gtk";
            packageId = "gtk";
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
          }
          {
            name = "javascriptcore-rs";
            packageId = "javascriptcore-rs";
            rename = "java_script_core";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "soup3";
            packageId = "soup3";
            rename = "soup";
          }
          {
            name = "webkit2gtk-sys";
            packageId = "webkit2gtk-sys";
            rename = "ffi";
          }
        ];
        features = {
          "v2_10" = [ "v2_8" "ffi/v2_10" ];
          "v2_12" = [ "v2_10" "ffi/v2_12" ];
          "v2_14" = [ "v2_12" "ffi/v2_14" ];
          "v2_16" = [ "v2_14" "ffi/v2_16" ];
          "v2_18" = [ "v2_16" "ffi/v2_18" ];
          "v2_20" = [ "v2_18" "ffi/v2_20" ];
          "v2_22" = [ "v2_20" "ffi/v2_22" ];
          "v2_24" = [ "v2_22" "ffi/v2_24" ];
          "v2_26" = [ "v2_24" "ffi/v2_26" ];
          "v2_28" = [ "v2_26" "ffi/v2_28" ];
          "v2_30" = [ "v2_28" "ffi/v2_30" ];
          "v2_32" = [ "v2_30" "ffi/v2_32" ];
          "v2_34" = [ "v2_32" "ffi/v2_34" ];
          "v2_36" = [ "v2_34" "ffi/v2_36" ];
          "v2_38" = [ "v2_36" "ffi/v2_38" ];
          "v2_4" = [ "v2_2" ];
          "v2_40" = [ "v2_38" "ffi/v2_40" ];
          "v2_6" = [ "v2_4" "ffi/v2_6" ];
          "v2_8" = [ "v2_6" "ffi/v2_8" ];
        };
        resolvedDefaultFeatures = [ "v2_10" "v2_12" "v2_14" "v2_16" "v2_18" "v2_2" "v2_20" "v2_22" "v2_24" "v2_26" "v2_28" "v2_30" "v2_32" "v2_34" "v2_36" "v2_38" "v2_4" "v2_6" "v2_8" ];
      };
      "webkit2gtk-sys" = rec {
        crateName = "webkit2gtk-sys";
        version = "2.0.1";
        edition = "2018";
        links = "web_kit2";
        sha256 = "0z6mlrkw5syy0k6k1kikxmygfgwrslq3ssdq2a7iykaizj5a7nk2";
        libName = "webkit2gtk_sys";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
            rename = "cairo";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
            rename = "gdk";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
            rename = "gio";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            rename = "glib";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            rename = "gobject";
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
            rename = "gtk";
          }
          {
            name = "javascriptcore-rs-sys";
            packageId = "javascriptcore-rs-sys";
            rename = "java_script_core";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "soup3-sys";
            packageId = "soup3-sys";
            rename = "soup";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "system-deps";
            packageId = "system-deps 6.2.2";
          }
        ];
        features = {
          "v2_10" = [ "v2_8" ];
          "v2_12" = [ "v2_10" ];
          "v2_14" = [ "v2_12" ];
          "v2_16" = [ "v2_14" ];
          "v2_18" = [ "v2_16" ];
          "v2_20" = [ "v2_18" ];
          "v2_22" = [ "v2_20" ];
          "v2_24" = [ "v2_22" ];
          "v2_26" = [ "v2_24" ];
          "v2_28" = [ "v2_26" ];
          "v2_30" = [ "v2_28" ];
          "v2_32" = [ "v2_30" ];
          "v2_34" = [ "v2_32" ];
          "v2_36" = [ "v2_34" ];
          "v2_38" = [ "v2_36" ];
          "v2_40" = [ "v2_38" ];
          "v2_8" = [ "v2_6" ];
        };
        resolvedDefaultFeatures = [ "v2_10" "v2_12" "v2_14" "v2_16" "v2_18" "v2_20" "v2_22" "v2_24" "v2_26" "v2_28" "v2_30" "v2_32" "v2_34" "v2_36" "v2_38" "v2_6" "v2_8" ];
      };
      "webview2-com" = rec {
        crateName = "webview2-com";
        version = "0.31.0";
        edition = "2021";
        sha256 = "0vr2n9f3yrs94yib59dj9gsjlb36iqvyrvl0c1l14ckb9jkcy5k5";
        dependencies = [
          {
            name = "webview2-com-macros";
            packageId = "webview2-com-macros";
          }
          {
            name = "webview2-com-sys";
            packageId = "webview2-com-sys";
          }
          {
            name = "windows";
            packageId = "windows";
            features = [ "implement" ];
          }
          {
            name = "windows-core";
            packageId = "windows-core";
          }
          {
            name = "windows-implement";
            packageId = "windows-implement";
          }
          {
            name = "windows-interface";
            packageId = "windows-interface";
          }
        ];
        devDependencies = [
          {
            name = "windows";
            packageId = "windows";
            features = [ "Win32_Graphics_Gdi" "Win32_System_LibraryLoader" "Win32_System_Threading" "Win32_UI_HiDpi" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_WindowsAndMessaging" ];
          }
        ];

      };
      "webview2-com-macros" = rec {
        crateName = "webview2-com-macros";
        version = "0.7.0";
        edition = "2021";
        sha256 = "1g69b4ghd387zbmb1r650qi6vp75jldxzg20i13250fdirwla4xc";
        procMacro = true;
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            features = [ "full" ];
          }
        ];

      };
      "webview2-com-sys" = rec {
        crateName = "webview2-com-sys";
        version = "0.31.0";
        edition = "2021";
        sha256 = "1kyps5hdvi2drhwgkvlz39gwg1dwi1jkxpz11dk5bw8g69vmnvf7";
        dependencies = [
          {
            name = "windows";
            packageId = "windows";
            features = [ "implement" "Win32_Foundation" "Win32_Globalization" "Win32_System_Com" "Win32_System_Ole" "Win32_System_Variant" "Win32_System_WinRT" "Win32_UI_WindowsAndMessaging" ];
          }
          {
            name = "windows-core";
            packageId = "windows-core";
          }
        ];
        buildDependencies = [
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "basetsd" "dbghelp" "errhandlingapi" "libloaderapi" "minwindef" "processthreadsapi" "winerror" "winnt" "winsock2" "ws2def" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.8";
        edition = "2021";
        sha256 = "0svcgddd2rw06mj4r76gj655qsa1ikgz3d3gzax96fz7w62c6k2d";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" "Win32_System_SystemInformation" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows" = rec {
        crateName = "windows";
        version = "0.57.0";
        edition = "2021";
        sha256 = "0hqid10bqvxa3pbpgvrh2cilf950lxsd9zqfv3rldc73v2s2qd0j";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];
        features = {
          "AI" = [ "Foundation" ];
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel" = [ "Foundation" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data" = [ "Foundation" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices" = [ "Foundation" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded" = [ "Foundation" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization" = [ "Foundation" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics" = [ "Foundation" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management" = [ "Foundation" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media" = [ "Foundation" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking" = [ "Foundation" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception" = [ "Foundation" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone" = [ "Foundation" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security" = [ "Foundation" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services" = [ "Foundation" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage" = [ "Foundation" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System" = [ "Foundation" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteDesktop_Provider" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI" = [ "Foundation" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Notifications_Preview" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Web" = [ "Foundation" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "default" = [ "std" ];
          "std" = [ "windows-core/std" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Devices" "Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_System" "Win32_System_Com" "Win32_System_Com_StructuredStorage" "Win32_System_DataExchange" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_Variant" "Win32_System_WinRT" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging" "default" "implement" "std" ];
      };
      "windows-core" = rec {
        crateName = "windows-core";
        version = "0.57.0";
        edition = "2021";
        sha256 = "0bc3jxw2jw76xkk3ddvnp5b2m76qmbzv1qncgvb6qrlhl8wj9vfj";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-implement";
            packageId = "windows-implement";
          }
          {
            name = "windows-interface";
            packageId = "windows-interface";
          }
          {
            name = "windows-result";
            packageId = "windows-result";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-implement" = rec {
        crateName = "windows-implement";
        version = "0.57.0";
        edition = "2021";
        sha256 = "1mqs7qypclnmx5r8yq5jy3g2d8i27vzag9yzzzxzpdnmb70ds1wi";
        procMacro = true;
        libName = "windows_implement";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "derive" ];
          }
        ];

      };
      "windows-interface" = rec {
        crateName = "windows-interface";
        version = "0.57.0";
        edition = "2021";
        sha256 = "19zwlzr0q1z9s692681yb5w2lhvwcyx4v95s25hfdkd3isry9gi9";
        procMacro = true;
        libName = "windows_interface";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.68";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "derive" "clone-impls" ];
          }
        ];

      };
      "windows-result" = rec {
        crateName = "windows-result";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1y274q1v0vy21lhkgslpxpq1m08hvr1mcs2l88h1b1gcx0136f2y";
        libName = "windows_result";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-sys 0.45.0" = rec {
        crateName = "windows-sys";
        version = "0.45.0";
        edition = "2018";
        sha256 = "1l36bcqm4g89pknfp8r9rl1w4bn017q6a8qlx8viv0xjxzjkna3m";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.42.2";
            target = { target, features }: (!(target."windows_raw_dylib" or false));
          }
        ];
        features = {
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Globalization" "default" ];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_Security_Cryptography" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_IO" "Win32_System_Memory" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-targets 0.42.2" = rec {
        crateName = "windows-targets";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0wfhnib2fisxlx8c507dbmh97kgij4r6kcxdi0f9nk6l1k080lcf";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-uwp-windows-msvc");
          }
        ];

      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.52.5" = rec {
        crateName = "windows-targets";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1sz7jrnkygmmlj1ia8fk85wbyil450kq5qkh5qh9sh2rcnj161vg";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.5";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.5";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.5";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.5";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-version" = rec {
        crateName = "windows-version";
        version = "0.1.1";
        edition = "2021";
        sha256 = "05a5hia3d2vxd16vj2hxiyicxaqdjcm9sgpip4pzza4vgi2sm639";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];

      };
      "windows_aarch64_gnullvm 0.42.2" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1y4q0qmvl0lvp7syxvfykafvmwal5hrjb4fmv04bqs0bawc52yjr";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.5";
        edition = "2021";
        sha256 = "0qrjimbj67nnyn7zqy15mzzmqg0mn5gsr2yciqjxm3cb3vbyx23h";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.42.2" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0hsdikjl5sa1fva5qskpwlxzpc5q9l909fpl1w6yy1hglrj8i3p0";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1dmga8kqlmln2ibckk6mxc9n59vdg8ziqa2zr8awcl720hazv1cr";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.42.2" = rec {
        crateName = "windows_i686_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0kx866dfrby88lqs9v1vgmrkk1z6af9lhaghh5maj7d4imyr47f6";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.5";
        edition = "2021";
        sha256 = "0w4np3l6qwlra9s2xpflqrs60qk1pz6ahhn91rr74lvdy4y0gfl8";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1s9f4gff0cixd86mw3n63rpmsm4pmr4ffndl6s7qa2h35492dx47";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.42.2" = rec {
        crateName = "windows_i686_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0q0h9m2aq1pygc199pa5jgc952qhcnf0zn688454i7v4xjv41n24";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1gw7fklxywgpnwbwg43alb4hm0qjmx72hqrlwy5nanrxs7rjng6v";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.42.2" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0dnbf2xnp3xrvy8v9mgs3var4zq9v9yh9kv79035rdgyp2w15scd";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1n8p2mcf3lw6300k77a0knksssmgwb9hynl793mhkzyydgvlchjf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.42.2" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "18wl9r8qbsl475j39zvawlidp1bsbinliwfymr43fibdld31pm16";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.5";
        edition = "2021";
        sha256 = "15n56jrh4s5bz66zimavr1rmcaw6wa306myrvmbc6rydhbj9h8l5";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.42.2" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1w5r0q0yzx827d10dpjza2ww0j8iajqhmb54s735hhaj66imvv4s";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1w1bn24ap8dp9i85s8mlg8cim2bl2368bd6qyvm0xzqvzmdpxi5y";
        authors = [
          "Microsoft"
        ];

      };
      "winnow" = rec {
        crateName = "winnow";
        version = "0.5.40";
        edition = "2021";
        sha256 = "0xk8maai7gyxda673mmw3pj1hdizy5fpi7287vaywykkk19sk4zm";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "wry" = rec {
        crateName = "wry";
        version = "0.41.0";
        edition = "2021";
        sha256 = "1ka43ddg8awxlz13xyyl1d7fw3kdlfgrd6nh0mw2vc46aya0rc38";
        authors = [
          "Tauri Programme within The Commons Conservancy"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "block";
            packageId = "block";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "cocoa";
            packageId = "cocoa";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "dpi";
            packageId = "dpi";
          }
          {
            name = "dunce";
            packageId = "dunce";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "gdkx11";
            packageId = "gdkx11";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "gtk";
            packageId = "gtk";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "html5ever";
            packageId = "html5ever";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "javascriptcore-rs";
            packageId = "javascriptcore-rs";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
            features = [ "v2_28" ];
          }
          {
            name = "jni";
            packageId = "jni";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "kuchikiki";
            packageId = "kuchikiki";
            rename = "kuchiki";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "ndk";
            packageId = "ndk";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "ndk-context";
            packageId = "ndk-context";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "objc_id";
            packageId = "objc_id";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
            features = [ "std" ];
          }
          {
            name = "sha2";
            packageId = "sha2";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "soup3";
            packageId = "soup3";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "tao-macros";
            packageId = "tao-macros";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "webkit2gtk";
            packageId = "webkit2gtk";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
            features = [ "v2_38" ];
          }
          {
            name = "webkit2gtk-sys";
            packageId = "webkit2gtk-sys";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "webview2-com";
            packageId = "webview2-com";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "windows";
            packageId = "windows";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "implement" "Win32_Foundation" "Win32_Graphics_Gdi" "Win32_System_Com" "Win32_System_Com_StructuredStorage" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_UI_Shell" "Win32_UI_WindowsAndMessaging" "Win32_Globalization" "Win32_UI_HiDpi" "Win32_UI_Input" "Win32_UI_Input_KeyboardAndMouse" ];
          }
          {
            name = "windows-core";
            packageId = "windows-core";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "windows-version";
            packageId = "windows-version";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "x11-dl";
            packageId = "x11-dl";
            optional = true;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
        ];
        devDependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];
        features = {
          "default" = [ "drag-drop" "objc-exception" "protocol" "os-webview" ];
          "gdkx11" = [ "dep:gdkx11" ];
          "javascriptcore-rs" = [ "dep:javascriptcore-rs" ];
          "linux-body" = [ "webkit2gtk/v2_40" "os-webview" ];
          "objc-exception" = [ "objc/exception" ];
          "os-webview" = [ "javascriptcore-rs" "webkit2gtk" "webkit2gtk-sys" "dep:gtk" "soup3" "x11-dl" "gdkx11" ];
          "serde" = [ "dpi/serde" ];
          "soup3" = [ "dep:soup3" ];
          "tracing" = [ "dep:tracing" ];
          "webkit2gtk" = [ "dep:webkit2gtk" ];
          "webkit2gtk-sys" = [ "dep:webkit2gtk-sys" ];
          "x11-dl" = [ "dep:x11-dl" ];
        };
        resolvedDefaultFeatures = [ "default" "drag-drop" "gdkx11" "javascriptcore-rs" "objc-exception" "os-webview" "protocol" "soup3" "webkit2gtk" "webkit2gtk-sys" "x11-dl" ];
      };
      "x11" = rec {
        crateName = "x11";
        version = "2.21.0";
        edition = "2021";
        sha256 = "0bnvl09d7044k067gqdx1ln2r0ljp5f4675icwb0216d9i3aabah";
        authors = [
          "daggerbot <daggerbot@gmail.com>"
          "Erle Pereira <erle@erlepereira.com>"
          "AltF02 <contact@altf2.dev>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "all" = [ "dpms" "glx" "xcursor" "xf86vmode" "xfixes" "xft" "xinerama" "xinput" "xlib" "xlib_xcb" "xmu" "xrandr" "xrecord" "xrender" "xss" "xt" "xtest" "xtst" "dox" ];
          "xrecord" = [ "xtst" ];
          "xtest" = [ "xtst" ];
        };
      };
      "x11-dl" = rec {
        crateName = "x11-dl";
        version = "2.21.0";
        edition = "2021";
        sha256 = "0vsiq62xpcfm0kn9zjw5c9iycvccxl22jya8wnk18lyxzqj5jwrq";
        authors = [
          "daggerbot <daggerbot@gmail.com>"
          "Erle Pereira <erle@erlepereira.com>"
          "AltF02 <contact@altf2.dev>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];

      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.8.1";
        edition = "2021";
        sha256 = "1pjdrmjwmszpxfd7r860jx54cyk94qk59x13sc307cvr5256glyf";
        authors = [
          "The RustCrypto Project Developers"
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "zeroize_derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zeroize_derive" = [ "dep:zeroize_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
    };

    #
    # crate2nix/default.nix (excerpt start)
    #

    /* Target (platform) data for conditional dependencies.
      This corresponds roughly to what buildRustCrate is setting.
    */
    makeDefaultTarget = platform: {
      unix = platform.isUnix;
      windows = platform.isWindows;
      fuchsia = true;
      test = false;

      inherit (platform.rust.platform)
        arch
        os
        vendor;
      family = platform.rust.platform.target-family;
      env = "gnu";
      endian =
        if platform.parsed.cpu.significantByte.name == "littleEndian"
        then "little" else "big";
      pointer_width = toString platform.parsed.cpu.bits;
      debug_assertions = false;
    };

    /* Filters common temp files and build files. */
    # TODO(pkolloch): Substitute with gitignore filter
    sourceFilter = name: type:
      let
        baseName = builtins.baseNameOf (builtins.toString name);
      in
        ! (
          # Filter out git
          baseName == ".gitignore"
          || (type == "directory" && baseName == ".git")

          # Filter out build results
          || (
            type == "directory" && (
              baseName == "target"
              || baseName == "_site"
              || baseName == ".sass-cache"
              || baseName == ".jekyll-metadata"
              || baseName == "build-artifacts"
            )
          )

          # Filter out nix-build result symlinks
          || (
            type == "symlink" && lib.hasPrefix "result" baseName
          )

          # Filter out IDE config
          || (
            type == "directory" && (
              baseName == ".idea" || baseName == ".vscode"
            )
          ) || lib.hasSuffix ".iml" baseName

          # Filter out nix build files
          || baseName == "Cargo.nix"

          # Filter out editor backup / swap files.
          || lib.hasSuffix "~" baseName
          || builtins.match "^\\.sw[a-z]$$" baseName != null
          || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
          || lib.hasSuffix ".tmp" baseName
          || lib.hasSuffix ".bak" baseName
          || baseName == "tests.nix"
        );

    /* Returns a crate which depends on successful test execution
      of crate given as the second argument.

      testCrateFlags: list of flags to pass to the test exectuable
      testInputs: list of packages that should be available during test execution
    */
    crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
      assert builtins.typeOf testCrateFlags == "list";
      assert builtins.typeOf testInputs == "list";
      assert builtins.typeOf testPreRun == "string";
      assert builtins.typeOf testPostRun == "string";
      let
        # override the `crate` so that it will build and execute tests instead of
        # building the actual lib and bin targets We just have to pass `--test`
        # to rustc and it will do the right thing.  We execute the tests and copy
        # their log and the test executables to $out for later inspection.
        test =
          let
            drv = testCrate.override
              (
                _: {
                  buildTests = true;
                }
              );
            # If the user hasn't set any pre/post commands, we don't want to
            # insert empty lines. This means that any existing users of crate2nix
            # don't get a spurious rebuild unless they set these explicitly.
            testCommand = pkgs.lib.concatStringsSep "\n"
              (pkgs.lib.filter (s: s != "") [
                testPreRun
                "$f $testCrateFlags 2>&1 | tee -a $out"
                testPostRun
              ]);
          in
          pkgs.runCommand "run-tests-${testCrate.name}"
            {
              inherit testCrateFlags;
              buildInputs = testInputs;
            } ''
            set -e

            export RUST_BACKTRACE=1

            # recreate a file hierarchy as when running tests with cargo

            # the source for test data
            # It's necessary to locate the source in $NIX_BUILD_TOP/source/
            # instead of $NIX_BUILD_TOP/
            # because we compiled those test binaries in the former and not the latter.
            # So all paths will expect source tree to be there and not in the build top directly.
            # For example: $NIX_BUILD_TOP := /build in general, if you ask yourself.
            # NOTE: There could be edge cases if `crate.sourceRoot` does exist but
            # it's very hard to reason about them.
            # Open a bug if you run into this!
            mkdir -p source/
            cd source/

            ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

            # build outputs
            testRoot=target/debug
            mkdir -p $testRoot

            # executables of the crate
            # we copy to prevent std::env::current_exe() to resolve to a store location
            for i in ${crate}/bin/*; do
              cp "$i" "$testRoot"
            done
            chmod +w -R .

            # test harness executables are suffixed with a hash, like cargo does
            # this allows to prevent name collision with the main
            # executables of the crate
            hash=$(basename $out)
            for file in ${drv}/tests/*; do
              f=$testRoot/$(basename $file)-$hash
              cp $file $f
              ${testCommand}
            done
          '';
      in
      pkgs.runCommand "${crate.name}-linked"
        {
          inherit (crate) outputs crateName;
          passthru = (crate.passthru or { }) // {
            inherit test;
          };
        }
        (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
          echo tested by ${test}
        '' + ''
          ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
        '');

    /* A restricted overridable version of builtRustCratesWithFeatures. */
    buildRustCrateWithFeatures =
      { packageId
      , features ? rootFeatures
      , crateOverrides ? defaultCrateOverrides
      , buildRustCrateForPkgsFunc ? null
      , runTests ? false
      , testCrateFlags ? [ ]
      , testInputs ? [ ]
        # Any command to run immediatelly before a test is executed.
      , testPreRun ? ""
        # Any command run immediatelly after a test is executed.
      , testPostRun ? ""
      }:
      lib.makeOverridable
        (
          { features
          , crateOverrides
          , runTests
          , testCrateFlags
          , testInputs
          , testPreRun
          , testPostRun
          }:
          let
            buildRustCrateForPkgsFuncOverriden =
              if buildRustCrateForPkgsFunc != null
              then buildRustCrateForPkgsFunc
              else
                (
                  if crateOverrides == pkgs.defaultCrateOverrides
                  then buildRustCrateForPkgs
                  else
                    pkgs: (buildRustCrateForPkgs pkgs).override {
                      defaultCrateOverrides = crateOverrides;
                    }
                );
            builtRustCrates = builtRustCratesWithFeatures {
              inherit packageId features;
              buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
              runTests = false;
            };
            builtTestRustCrates = builtRustCratesWithFeatures {
              inherit packageId features;
              buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
              runTests = true;
            };
            drv = builtRustCrates.crates.${packageId};
            testDrv = builtTestRustCrates.crates.${packageId};
            derivation =
              if runTests then
                crateWithTest
                  {
                    crate = drv;
                    testCrate = testDrv;
                    inherit testCrateFlags testInputs testPreRun testPostRun;
                  }
              else drv;
          in
          derivation
        )
        { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

    /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
      for the corresponding crate.
    */
    builtRustCratesWithFeatures =
      { packageId
      , features
      , crateConfigs ? crates
      , buildRustCrateForPkgsFunc
      , runTests
      , makeTarget ? makeDefaultTarget
      } @ args:
        assert (builtins.isAttrs crateConfigs);
        assert (builtins.isString packageId);
        assert (builtins.isList features);
        assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
        assert (builtins.isBool runTests);
        let
          rootPackageId = packageId;
          mergedFeatures = mergePackageFeatures
            (
              args // {
                inherit rootPackageId;
                target = makeTarget stdenv.hostPlatform // { test = runTests; };
              }
            );
          # Memoize built packages so that reappearing packages are only built once.
          builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
          mkBuiltByPackageIdByPkgs = pkgs:
            let
              self = {
                crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
                target = makeTarget stdenv.hostPlatform;
                build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
              };
            in
            self;
          buildByPackageIdForPkgsImpl = self: pkgs: packageId:
            let
              features = mergedFeatures."${packageId}" or [ ];
              crateConfig' = crateConfigs."${packageId}";
              crateConfig =
                builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
              devDependencies =
                lib.optionals
                  (runTests && packageId == rootPackageId)
                  (crateConfig'.devDependencies or [ ]);
              dependencies =
                dependencyDerivations {
                  inherit features;
                  inherit (self) target;
                  buildByPackageId = depPackageId:
                    # proc_macro crates must be compiled for the build architecture
                    if crateConfigs.${depPackageId}.procMacro or false
                    then self.build.crates.${depPackageId}
                    else self.crates.${depPackageId};
                  dependencies =
                    (crateConfig.dependencies or [ ])
                    ++ devDependencies;
                };
              buildDependencies =
                dependencyDerivations {
                  inherit features;
                  inherit (self.build) target;
                  buildByPackageId = depPackageId:
                    self.build.crates.${depPackageId};
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              dependenciesWithRenames =
                let
                  buildDeps = filterEnabledDependencies {
                    inherit features;
                    inherit (self) target;
                    dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                  };
                  hostDeps = filterEnabledDependencies {
                    inherit features;
                    inherit (self.build) target;
                    dependencies = crateConfig.buildDependencies or [ ];
                  };
                in
                lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
              # Crate renames have the form:
              #
              # {
              #    crate_name = [
              #       { version = "1.2.3"; rename = "crate_name01"; }
              #    ];
              #    # ...
              # }
              crateRenames =
                let
                  grouped =
                    lib.groupBy
                      (dependency: dependency.name)
                      dependenciesWithRenames;
                  versionAndRename = dep:
                    let
                      package = crateConfigs."${dep.packageId}";
                    in
                    { inherit (dep) rename; inherit (package) version; };
                in
                lib.mapAttrs (name: builtins.map versionAndRename) grouped;
            in
            buildRustCrateForPkgsFunc pkgs
              (
                crateConfig // {
                  src = crateConfig.src or (
                    pkgs.fetchurl rec {
                      name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                      # https://www.pietroalbini.org/blog/downloading-crates-io/
                      # Not rate-limited, CDN URL.
                      url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                      sha256 =
                        assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                        crateConfig.sha256;
                    }
                  );
                  extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                  inherit features dependencies buildDependencies crateRenames release;
                }
              );
        in
        builtByPackageIdByPkgs;

    /* Returns the actual derivations for the given dependencies. */
    dependencyDerivations =
      { buildByPackageId
      , features
      , dependencies
      , target
      }:
        assert (builtins.isList features);
        assert (builtins.isList dependencies);
        assert (builtins.isAttrs target);
        let
          enabledDependencies = filterEnabledDependencies {
            inherit dependencies features target;
          };
          depDerivation = dependency: buildByPackageId dependency.packageId;
        in
        map depDerivation enabledDependencies;

    /* Returns a sanitized version of val with all values substituted that cannot
      be serialized as JSON.
    */
    sanitizeForJson = val:
      if builtins.isAttrs val
      then lib.mapAttrs (n: sanitizeForJson) val
      else if builtins.isList val
      then builtins.map sanitizeForJson val
      else if builtins.isFunction val
      then "function"
      else val;

    /* Returns various tools to debug a crate. */
    debugCrate = { packageId, target ? makeDefaultTarget stdenv.hostPlatform }:
      assert (builtins.isString packageId);
      let
        debug = rec {
          # The built tree as passed to buildRustCrate.
          buildTree = buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: lib.id;
            inherit packageId;
          };
          sanitizedBuildTree = sanitizeForJson buildTree;
          dependencyTree = sanitizeForJson
            (
              buildRustCrateWithFeatures {
                buildRustCrateForPkgsFunc = _: crate: {
                  "01_crateName" = crate.crateName or false;
                  "02_features" = crate.features or [ ];
                  "03_dependencies" = crate.dependencies or [ ];
                };
                inherit packageId;
              }
            );
          mergedPackageFeatures = mergePackageFeatures {
            features = rootFeatures;
            inherit packageId target;
          };
          diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
            inherit packageId target;
          };
        };
      in
      { internal = debug; };

    /* Returns differences between cargo default features and crate2nix default
      features.

      This is useful for verifying the feature resolution in crate2nix.
    */
    diffDefaultPackageFeatures =
      { crateConfigs ? crates
      , packageId
      , target
      }:
        assert (builtins.isAttrs crateConfigs);
        let
          prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
          mergedFeatures =
            prefixValues
              "crate2nix"
              (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
          configs = prefixValues "cargo" crateConfigs;
          combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
          onlyInCargo =
            builtins.attrNames
              (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
          onlyInCrate2Nix =
            builtins.attrNames
              (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
          differentFeatures = lib.filterAttrs
            (
              n: v:
                (v ? "crate2nix")
                && (v ? "cargo")
                && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
            )
            combined;
        in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

    /* Returns an attrset mapping packageId to the list of enabled features.

      If multiple paths to a dependency enable different features, the
      corresponding feature sets are merged. Features in rust are additive.
    */
    mergePackageFeatures =
      { crateConfigs ? crates
      , packageId
      , rootPackageId ? packageId
      , features ? rootFeatures
      , dependencyPath ? [ crates.${packageId}.crateName ]
      , featuresByPackageId ? { }
      , target
        # Adds devDependencies to the crate with rootPackageId.
      , runTests ? false
      , ...
      } @ args:
        assert (builtins.isAttrs crateConfigs);
        assert (builtins.isString packageId);
        assert (builtins.isString rootPackageId);
        assert (builtins.isList features);
        assert (builtins.isList dependencyPath);
        assert (builtins.isAttrs featuresByPackageId);
        assert (builtins.isAttrs target);
        assert (builtins.isBool runTests);
        let
          crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
          expandedFeatures = expandFeatures (crateConfig.features or { }) features;
          enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
          depWithResolvedFeatures = dependency:
            let
              inherit (dependency) packageId;
              features = dependencyFeatures enabledFeatures dependency;
            in
            { inherit packageId features; };
          resolveDependencies = cache: path: dependencies:
            assert (builtins.isAttrs cache);
            assert (builtins.isList dependencies);
            let
              enabledDependencies = filterEnabledDependencies {
                inherit dependencies target;
                features = enabledFeatures;
              };
              directDependencies = map depWithResolvedFeatures enabledDependencies;
              foldOverCache = op: lib.foldl op cache directDependencies;
            in
            foldOverCache
              (
                cache: { packageId, features }:
                  let
                    cacheFeatures = cache.${packageId} or [ ];
                    combinedFeatures = sortedUnique (cacheFeatures ++ features);
                  in
                  if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                  then cache
                  else
                    mergePackageFeatures {
                      features = combinedFeatures;
                      featuresByPackageId = cache;
                      inherit crateConfigs packageId target runTests rootPackageId;
                    }
              );
          cacheWithSelf =
            let
              cacheFeatures = featuresByPackageId.${packageId} or [ ];
              combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
            in
            featuresByPackageId // {
              "${packageId}" = combinedFeatures;
            };
          cacheWithDependencies =
            resolveDependencies cacheWithSelf "dep"
              (
                crateConfig.dependencies or [ ]
                ++ lib.optionals
                  (runTests && packageId == rootPackageId)
                  (crateConfig.devDependencies or [ ])
              );
          cacheWithAll =
            resolveDependencies
              cacheWithDependencies "build"
              (crateConfig.buildDependencies or [ ]);
        in
        cacheWithAll;

    /* Returns the enabled dependencies given the enabled features. */
    filterEnabledDependencies = { dependencies, features, target }:
      assert (builtins.isList dependencies);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);

      lib.filter
        (
          dep:
          let
            targetFunc = dep.target or (features: true);
          in
          targetFunc { inherit features target; }
          && (
            !(dep.optional or false)
            || builtins.any (doesFeatureEnableDependency dep) features
          )
        )
        dependencies;

    /* Returns whether the given feature should enable the given dependency. */
    doesFeatureEnableDependency = dependency: feature:
      let
        name = dependency.rename or dependency.name;
        prefix = "${name}/";
        len = builtins.stringLength prefix;
        startsWithPrefix = builtins.substring 0 len feature == prefix;
      in
      feature == name || feature == "dep:" + name || startsWithPrefix;

    /* Returns the expanded features for the given inputFeatures by applying the
      rules in featureMap.

      featureMap is an attribute set which maps feature names to lists of further
      feature names to enable in case this feature is selected.
    */
    expandFeatures = featureMap: inputFeatures:
      assert (builtins.isAttrs featureMap);
      assert (builtins.isList inputFeatures);
      let
        expandFeaturesNoCycle = oldSeen: inputFeatures:
          if inputFeatures != [ ]
          then
            let
              # The feature we're currently expanding.
              feature = builtins.head inputFeatures;
              # All the features we've seen/expanded so far, including the one
              # we're currently processing.
              seen = oldSeen // { ${feature} = 1; };
              # Expand the feature but be careful to not re-introduce a feature
              # that we've already seen: this can easily cause a cycle, see issue
              # #209.
              enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
            in
            [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
          # No more features left, nothing to expand to.
          else [ ];
        outFeatures = expandFeaturesNoCycle { } inputFeatures;
      in
      sortedUnique outFeatures;

    /* This function adds optional dependencies as features if they are enabled
      indirectly by dependency features. This function mimics Cargo's behavior
      described in a note at:
      https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
    */
    enableFeatures = dependencies: features:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      let
        additionalFeatures = lib.concatMap
          (
            dependency:
              assert (builtins.isAttrs dependency);
              let
                enabled = builtins.any (doesFeatureEnableDependency dependency) features;
              in
              if (dependency.optional or false) && enabled
              then [ (dependency.rename or dependency.name) ]
              else [ ]
          )
          dependencies;
      in
      sortedUnique (features ++ additionalFeatures);

    /*
      Returns the actual features for the given dependency.

      features: The features of the crate that refers this dependency.
    */
    dependencyFeatures = features: dependency:
      assert (builtins.isList features);
      assert (builtins.isAttrs dependency);
      let
        defaultOrNil =
          if dependency.usesDefaultFeatures or true
          then [ "default" ]
          else [ ];
        explicitFeatures = dependency.features or [ ];
        additionalDependencyFeatures =
          let
            name = dependency.rename or dependency.name;
            stripPrefixMatch = prefix: s:
              if lib.hasPrefix prefix s
              then lib.removePrefix prefix s
              else null;
            extractFeature = feature: lib.findFirst
              (f: f != null)
              null
              (map (prefix: stripPrefixMatch prefix feature) [
                (name + "/")
                (name + "?/")
              ]);
            dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
          in
          dependencyFeatures;
      in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

    /* Sorts and removes duplicates from a list of strings. */
    sortedUnique = features:
      assert (builtins.isList features);
      assert (builtins.all builtins.isString features);
      let
        outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
      in
      builtins.sort (a: b: a < b) outFeaturesUnique;

    deprecationWarning = message: value:
      if strictDeprecation
      then builtins.throw "strictDeprecation enabled, aborting: ${message}"
      else builtins.trace message value;

    #
    # crate2nix/default.nix (excerpt end)
    #
  };
}

